// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.24586
//    <NameSpace>Litle.Sdk.Generated</NameSpace><Collection>ObservableCollection</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Litle.Sdk.Generated {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.ObjectModel;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class authentication : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string userField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string passwordField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string user {
            get {
                return this.userField;
            }
            set {
                if ((this.userField != null)) {
                    if ((userField.Equals(value) != true)) {
                        this.userField = value;
                        this.OnPropertyChanged("user");
                    }
                }
                else {
                    this.userField = value;
                    this.OnPropertyChanged("user");
                }
            }
        }
        
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((this.passwordField != null)) {
                    if ((passwordField.Equals(value) != true)) {
                        this.passwordField = value;
                        this.OnPropertyChanged("password");
                    }
                }
                else {
                    this.passwordField = value;
                    this.OnPropertyChanged("password");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(authentication));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current authentication object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an authentication object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output authentication object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out authentication obj, out System.Exception exception) {
            exception = null;
            obj = default(authentication);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out authentication obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static authentication Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((authentication)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current authentication object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an authentication object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output authentication object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out authentication obj, out System.Exception exception) {
            exception = null;
            obj = default(authentication);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out authentication obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static authentication LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this authentication object
        /// </summary>
        public virtual authentication Clone() {
            return ((authentication)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transactionTypeOptionReportGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transactionTypeWithReportGroupAndPartial))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(transactionTypeWithReportGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(registerTokenRequestType))]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class transactionType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string idField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string customerIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField != null)) {
                    if ((idField.Equals(value) != true)) {
                        this.idField = value;
                        this.OnPropertyChanged("id");
                    }
                }
                else {
                    this.idField = value;
                    this.OnPropertyChanged("id");
                }
            }
        }
        
        public string customerId {
            get {
                return this.customerIdField;
            }
            set {
                if ((this.customerIdField != null)) {
                    if ((customerIdField.Equals(value) != true)) {
                        this.customerIdField = value;
                        this.OnPropertyChanged("customerId");
                    }
                }
                else {
                    this.customerIdField = value;
                    this.OnPropertyChanged("customerId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(transactionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current transactionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an transactionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output transactionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out transactionType obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out transactionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static transactionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((transactionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current transactionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an transactionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output transactionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out transactionType obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out transactionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static transactionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this transactionType object
        /// </summary>
        public virtual transactionType Clone() {
            return ((transactionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class transactionTypeOptionReportGroup : transactionType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string reportGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string reportGroup {
            get {
                return this.reportGroupField;
            }
            set {
                if ((this.reportGroupField != null)) {
                    if ((reportGroupField.Equals(value) != true)) {
                        this.reportGroupField = value;
                        this.OnPropertyChanged("reportGroup");
                    }
                }
                else {
                    this.reportGroupField = value;
                    this.OnPropertyChanged("reportGroup");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(transactionTypeOptionReportGroup));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current transactionTypeOptionReportGroup object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an transactionTypeOptionReportGroup object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output transactionTypeOptionReportGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out transactionTypeOptionReportGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionTypeOptionReportGroup);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out transactionTypeOptionReportGroup obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static transactionTypeOptionReportGroup Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((transactionTypeOptionReportGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current transactionTypeOptionReportGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an transactionTypeOptionReportGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output transactionTypeOptionReportGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out transactionTypeOptionReportGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionTypeOptionReportGroup);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out transactionTypeOptionReportGroup obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static transactionTypeOptionReportGroup LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this transactionTypeOptionReportGroup object
        /// </summary>
        public virtual transactionTypeOptionReportGroup Clone() {
            return ((transactionTypeOptionReportGroup)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class transactionTypeWithReportGroupAndPartial : transactionType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string reportGroupField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool partialField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool partialFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string reportGroup {
            get {
                return this.reportGroupField;
            }
            set {
                if ((this.reportGroupField != null)) {
                    if ((reportGroupField.Equals(value) != true)) {
                        this.reportGroupField = value;
                        this.OnPropertyChanged("reportGroup");
                    }
                }
                else {
                    this.reportGroupField = value;
                    this.OnPropertyChanged("reportGroup");
                }
            }
        }
        
        public bool partial {
            get {
                return this.partialField;
            }
            set {
                if ((partialField.Equals(value) != true)) {
                    this.partialField = value;
                    this.OnPropertyChanged("partial");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool partialSpecified {
            get {
                return this.partialFieldSpecified;
            }
            set {
                if ((partialFieldSpecified.Equals(value) != true)) {
                    this.partialFieldSpecified = value;
                    this.OnPropertyChanged("partialSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(transactionTypeWithReportGroupAndPartial));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current transactionTypeWithReportGroupAndPartial object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an transactionTypeWithReportGroupAndPartial object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output transactionTypeWithReportGroupAndPartial object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out transactionTypeWithReportGroupAndPartial obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionTypeWithReportGroupAndPartial);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out transactionTypeWithReportGroupAndPartial obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static transactionTypeWithReportGroupAndPartial Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((transactionTypeWithReportGroupAndPartial)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current transactionTypeWithReportGroupAndPartial object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an transactionTypeWithReportGroupAndPartial object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output transactionTypeWithReportGroupAndPartial object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out transactionTypeWithReportGroupAndPartial obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionTypeWithReportGroupAndPartial);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out transactionTypeWithReportGroupAndPartial obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static transactionTypeWithReportGroupAndPartial LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this transactionTypeWithReportGroupAndPartial object
        /// </summary>
        public virtual transactionTypeWithReportGroupAndPartial Clone() {
            return ((transactionTypeWithReportGroupAndPartial)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(registerTokenRequestType))]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class transactionTypeWithReportGroup : transactionType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string reportGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string reportGroup {
            get {
                return this.reportGroupField;
            }
            set {
                if ((this.reportGroupField != null)) {
                    if ((reportGroupField.Equals(value) != true)) {
                        this.reportGroupField = value;
                        this.OnPropertyChanged("reportGroup");
                    }
                }
                else {
                    this.reportGroupField = value;
                    this.OnPropertyChanged("reportGroup");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(transactionTypeWithReportGroup));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current transactionTypeWithReportGroup object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an transactionTypeWithReportGroup object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output transactionTypeWithReportGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out transactionTypeWithReportGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionTypeWithReportGroup);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out transactionTypeWithReportGroup obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static transactionTypeWithReportGroup Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((transactionTypeWithReportGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current transactionTypeWithReportGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an transactionTypeWithReportGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output transactionTypeWithReportGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out transactionTypeWithReportGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(transactionTypeWithReportGroup);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out transactionTypeWithReportGroup obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static transactionTypeWithReportGroup LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this transactionTypeWithReportGroup object
        /// </summary>
        public virtual transactionTypeWithReportGroup Clone() {
            return ((transactionTypeWithReportGroup)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class registerTokenRequestType : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string accountNumberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckForTokenType echeckForTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string paypageRegistrationIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public registerTokenRequestType() {
            this.echeckForTokenField = new echeckForTokenType();
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string accountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                if ((this.accountNumberField != null)) {
                    if ((accountNumberField.Equals(value) != true)) {
                        this.accountNumberField = value;
                        this.OnPropertyChanged("accountNumber");
                    }
                }
                else {
                    this.accountNumberField = value;
                    this.OnPropertyChanged("accountNumber");
                }
            }
        }
        
        public echeckForTokenType echeckForToken {
            get {
                return this.echeckForTokenField;
            }
            set {
                if ((this.echeckForTokenField != null)) {
                    if ((echeckForTokenField.Equals(value) != true)) {
                        this.echeckForTokenField = value;
                        this.OnPropertyChanged("echeckForToken");
                    }
                }
                else {
                    this.echeckForTokenField = value;
                    this.OnPropertyChanged("echeckForToken");
                }
            }
        }
        
        public string paypageRegistrationId {
            get {
                return this.paypageRegistrationIdField;
            }
            set {
                if ((this.paypageRegistrationIdField != null)) {
                    if ((paypageRegistrationIdField.Equals(value) != true)) {
                        this.paypageRegistrationIdField = value;
                        this.OnPropertyChanged("paypageRegistrationId");
                    }
                }
                else {
                    this.paypageRegistrationIdField = value;
                    this.OnPropertyChanged("paypageRegistrationId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(registerTokenRequestType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current registerTokenRequestType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an registerTokenRequestType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output registerTokenRequestType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out registerTokenRequestType obj, out System.Exception exception) {
            exception = null;
            obj = default(registerTokenRequestType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out registerTokenRequestType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static registerTokenRequestType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((registerTokenRequestType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current registerTokenRequestType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an registerTokenRequestType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output registerTokenRequestType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out registerTokenRequestType obj, out System.Exception exception) {
            exception = null;
            obj = default(registerTokenRequestType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out registerTokenRequestType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static registerTokenRequestType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this registerTokenRequestType object
        /// </summary>
        public virtual registerTokenRequestType Clone() {
            return ((registerTokenRequestType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckForTokenType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string accNumField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string routingNumField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string accNum {
            get {
                return this.accNumField;
            }
            set {
                if ((this.accNumField != null)) {
                    if ((accNumField.Equals(value) != true)) {
                        this.accNumField = value;
                        this.OnPropertyChanged("accNum");
                    }
                }
                else {
                    this.accNumField = value;
                    this.OnPropertyChanged("accNum");
                }
            }
        }
        
        public string routingNum {
            get {
                return this.routingNumField;
            }
            set {
                if ((this.routingNumField != null)) {
                    if ((routingNumField.Equals(value) != true)) {
                        this.routingNumField = value;
                        this.OnPropertyChanged("routingNum");
                    }
                }
                else {
                    this.routingNumField = value;
                    this.OnPropertyChanged("routingNum");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckForTokenType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckForTokenType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckForTokenType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckForTokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckForTokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckForTokenType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckForTokenType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckForTokenType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckForTokenType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckForTokenType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckForTokenType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckForTokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckForTokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckForTokenType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckForTokenType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckForTokenType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckForTokenType object
        /// </summary>
        public virtual echeckForTokenType Clone() {
            return ((echeckForTokenType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class customerInfo : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string ssnField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime dobField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool dobFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime customerRegistrationDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerRegistrationDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customerInfoCustomerType customerTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerTypeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long incomeAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool incomeAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private currencyCodeEnum incomeCurrencyField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerCheckingAccountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerCheckingAccountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerSavingAccountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerSavingAccountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string employerNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string customerWorkTelephoneField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customerInfoResidenceStatus residenceStatusField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool residenceStatusFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int yearsAtResidenceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool yearsAtResidenceFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int yearsAtEmployerField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool yearsAtEmployerFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public customerInfo() {
            this.incomeCurrencyField = currencyCodeEnum.USD;
        }
        
        public string ssn {
            get {
                return this.ssnField;
            }
            set {
                if ((this.ssnField != null)) {
                    if ((ssnField.Equals(value) != true)) {
                        this.ssnField = value;
                        this.OnPropertyChanged("ssn");
                    }
                }
                else {
                    this.ssnField = value;
                    this.OnPropertyChanged("ssn");
                }
            }
        }
        
        public System.DateTime dob {
            get {
                return this.dobField;
            }
            set {
                if ((dobField.Equals(value) != true)) {
                    this.dobField = value;
                    this.OnPropertyChanged("dob");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dobSpecified {
            get {
                return this.dobFieldSpecified;
            }
            set {
                if ((dobFieldSpecified.Equals(value) != true)) {
                    this.dobFieldSpecified = value;
                    this.OnPropertyChanged("dobSpecified");
                }
            }
        }
        
        public System.DateTime customerRegistrationDate {
            get {
                return this.customerRegistrationDateField;
            }
            set {
                if ((customerRegistrationDateField.Equals(value) != true)) {
                    this.customerRegistrationDateField = value;
                    this.OnPropertyChanged("customerRegistrationDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerRegistrationDateSpecified {
            get {
                return this.customerRegistrationDateFieldSpecified;
            }
            set {
                if ((customerRegistrationDateFieldSpecified.Equals(value) != true)) {
                    this.customerRegistrationDateFieldSpecified = value;
                    this.OnPropertyChanged("customerRegistrationDateSpecified");
                }
            }
        }
        
        public customerInfoCustomerType customerType {
            get {
                return this.customerTypeField;
            }
            set {
                if ((customerTypeField.Equals(value) != true)) {
                    this.customerTypeField = value;
                    this.OnPropertyChanged("customerType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerTypeSpecified {
            get {
                return this.customerTypeFieldSpecified;
            }
            set {
                if ((customerTypeFieldSpecified.Equals(value) != true)) {
                    this.customerTypeFieldSpecified = value;
                    this.OnPropertyChanged("customerTypeSpecified");
                }
            }
        }
        
        public long incomeAmount {
            get {
                return this.incomeAmountField;
            }
            set {
                if ((incomeAmountField.Equals(value) != true)) {
                    this.incomeAmountField = value;
                    this.OnPropertyChanged("incomeAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool incomeAmountSpecified {
            get {
                return this.incomeAmountFieldSpecified;
            }
            set {
                if ((incomeAmountFieldSpecified.Equals(value) != true)) {
                    this.incomeAmountFieldSpecified = value;
                    this.OnPropertyChanged("incomeAmountSpecified");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(currencyCodeEnum.USD)]
        public currencyCodeEnum incomeCurrency {
            get {
                return this.incomeCurrencyField;
            }
            set {
                if ((incomeCurrencyField.Equals(value) != true)) {
                    this.incomeCurrencyField = value;
                    this.OnPropertyChanged("incomeCurrency");
                }
            }
        }
        
        public bool customerCheckingAccount {
            get {
                return this.customerCheckingAccountField;
            }
            set {
                if ((customerCheckingAccountField.Equals(value) != true)) {
                    this.customerCheckingAccountField = value;
                    this.OnPropertyChanged("customerCheckingAccount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerCheckingAccountSpecified {
            get {
                return this.customerCheckingAccountFieldSpecified;
            }
            set {
                if ((customerCheckingAccountFieldSpecified.Equals(value) != true)) {
                    this.customerCheckingAccountFieldSpecified = value;
                    this.OnPropertyChanged("customerCheckingAccountSpecified");
                }
            }
        }
        
        public bool customerSavingAccount {
            get {
                return this.customerSavingAccountField;
            }
            set {
                if ((customerSavingAccountField.Equals(value) != true)) {
                    this.customerSavingAccountField = value;
                    this.OnPropertyChanged("customerSavingAccount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerSavingAccountSpecified {
            get {
                return this.customerSavingAccountFieldSpecified;
            }
            set {
                if ((customerSavingAccountFieldSpecified.Equals(value) != true)) {
                    this.customerSavingAccountFieldSpecified = value;
                    this.OnPropertyChanged("customerSavingAccountSpecified");
                }
            }
        }
        
        public string employerName {
            get {
                return this.employerNameField;
            }
            set {
                if ((this.employerNameField != null)) {
                    if ((employerNameField.Equals(value) != true)) {
                        this.employerNameField = value;
                        this.OnPropertyChanged("employerName");
                    }
                }
                else {
                    this.employerNameField = value;
                    this.OnPropertyChanged("employerName");
                }
            }
        }
        
        public string customerWorkTelephone {
            get {
                return this.customerWorkTelephoneField;
            }
            set {
                if ((this.customerWorkTelephoneField != null)) {
                    if ((customerWorkTelephoneField.Equals(value) != true)) {
                        this.customerWorkTelephoneField = value;
                        this.OnPropertyChanged("customerWorkTelephone");
                    }
                }
                else {
                    this.customerWorkTelephoneField = value;
                    this.OnPropertyChanged("customerWorkTelephone");
                }
            }
        }
        
        public customerInfoResidenceStatus residenceStatus {
            get {
                return this.residenceStatusField;
            }
            set {
                if ((residenceStatusField.Equals(value) != true)) {
                    this.residenceStatusField = value;
                    this.OnPropertyChanged("residenceStatus");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool residenceStatusSpecified {
            get {
                return this.residenceStatusFieldSpecified;
            }
            set {
                if ((residenceStatusFieldSpecified.Equals(value) != true)) {
                    this.residenceStatusFieldSpecified = value;
                    this.OnPropertyChanged("residenceStatusSpecified");
                }
            }
        }
        
        public int yearsAtResidence {
            get {
                return this.yearsAtResidenceField;
            }
            set {
                if ((yearsAtResidenceField.Equals(value) != true)) {
                    this.yearsAtResidenceField = value;
                    this.OnPropertyChanged("yearsAtResidence");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool yearsAtResidenceSpecified {
            get {
                return this.yearsAtResidenceFieldSpecified;
            }
            set {
                if ((yearsAtResidenceFieldSpecified.Equals(value) != true)) {
                    this.yearsAtResidenceFieldSpecified = value;
                    this.OnPropertyChanged("yearsAtResidenceSpecified");
                }
            }
        }
        
        public int yearsAtEmployer {
            get {
                return this.yearsAtEmployerField;
            }
            set {
                if ((yearsAtEmployerField.Equals(value) != true)) {
                    this.yearsAtEmployerField = value;
                    this.OnPropertyChanged("yearsAtEmployer");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool yearsAtEmployerSpecified {
            get {
                return this.yearsAtEmployerFieldSpecified;
            }
            set {
                if ((yearsAtEmployerFieldSpecified.Equals(value) != true)) {
                    this.yearsAtEmployerFieldSpecified = value;
                    this.OnPropertyChanged("yearsAtEmployerSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(customerInfo));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current customerInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an customerInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output customerInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out customerInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(customerInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out customerInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static customerInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((customerInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current customerInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an customerInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output customerInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out customerInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(customerInfo);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out customerInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static customerInfo LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this customerInfo object
        /// </summary>
        public virtual customerInfo Clone() {
            return ((customerInfo)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum customerInfoCustomerType {
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Existing,
    }
    
    public enum currencyCodeEnum {
        
        /// <remarks/>
        AUD,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        CHF,
        
        /// <remarks/>
        DKK,
        
        /// <remarks/>
        EUR,
        
        /// <remarks/>
        GBP,
        
        /// <remarks/>
        HKD,
        
        /// <remarks/>
        JPY,
        
        /// <remarks/>
        NOK,
        
        /// <remarks/>
        NZD,
        
        /// <remarks/>
        SEK,
        
        /// <remarks/>
        SGD,
        
        /// <remarks/>
        USD,
    }
    
    public enum customerInfoResidenceStatus {
        
        /// <remarks/>
        Own,
        
        /// <remarks/>
        Rent,
        
        /// <remarks/>
        Other,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class billMeLaterRequest : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long bmlMerchantIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool bmlMerchantIdFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string bmlProductTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int termsAndConditionsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool termsAndConditionsFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string preapprovalNumberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int merchantPromotionalCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool merchantPromotionalCodeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerPasswordChangedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerPasswordChangedFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerBillingAddressChangedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerBillingAddressChangedFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerEmailChangedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerEmailChangedFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerPhoneChangedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool customerPhoneChangedFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string secretQuestionCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string secretQuestionAnswerField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string virtualAuthenticationKeyPresenceIndicatorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string virtualAuthenticationKeyDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int itemCategoryCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool itemCategoryCodeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authorizationSourcePlatformField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public billMeLaterRequest() {
            this.bmlProductTypeField = "BL";
        }
        
        public long bmlMerchantId {
            get {
                return this.bmlMerchantIdField;
            }
            set {
                if ((bmlMerchantIdField.Equals(value) != true)) {
                    this.bmlMerchantIdField = value;
                    this.OnPropertyChanged("bmlMerchantId");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bmlMerchantIdSpecified {
            get {
                return this.bmlMerchantIdFieldSpecified;
            }
            set {
                if ((bmlMerchantIdFieldSpecified.Equals(value) != true)) {
                    this.bmlMerchantIdFieldSpecified = value;
                    this.OnPropertyChanged("bmlMerchantIdSpecified");
                }
            }
        }
        
        public string bmlProductType {
            get {
                return this.bmlProductTypeField;
            }
            set {
                if ((this.bmlProductTypeField != null)) {
                    if ((bmlProductTypeField.Equals(value) != true)) {
                        this.bmlProductTypeField = value;
                        this.OnPropertyChanged("bmlProductType");
                    }
                }
                else {
                    this.bmlProductTypeField = value;
                    this.OnPropertyChanged("bmlProductType");
                }
            }
        }
        
        public int termsAndConditions {
            get {
                return this.termsAndConditionsField;
            }
            set {
                if ((termsAndConditionsField.Equals(value) != true)) {
                    this.termsAndConditionsField = value;
                    this.OnPropertyChanged("termsAndConditions");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool termsAndConditionsSpecified {
            get {
                return this.termsAndConditionsFieldSpecified;
            }
            set {
                if ((termsAndConditionsFieldSpecified.Equals(value) != true)) {
                    this.termsAndConditionsFieldSpecified = value;
                    this.OnPropertyChanged("termsAndConditionsSpecified");
                }
            }
        }
        
        public string preapprovalNumber {
            get {
                return this.preapprovalNumberField;
            }
            set {
                if ((this.preapprovalNumberField != null)) {
                    if ((preapprovalNumberField.Equals(value) != true)) {
                        this.preapprovalNumberField = value;
                        this.OnPropertyChanged("preapprovalNumber");
                    }
                }
                else {
                    this.preapprovalNumberField = value;
                    this.OnPropertyChanged("preapprovalNumber");
                }
            }
        }
        
        public int merchantPromotionalCode {
            get {
                return this.merchantPromotionalCodeField;
            }
            set {
                if ((merchantPromotionalCodeField.Equals(value) != true)) {
                    this.merchantPromotionalCodeField = value;
                    this.OnPropertyChanged("merchantPromotionalCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool merchantPromotionalCodeSpecified {
            get {
                return this.merchantPromotionalCodeFieldSpecified;
            }
            set {
                if ((merchantPromotionalCodeFieldSpecified.Equals(value) != true)) {
                    this.merchantPromotionalCodeFieldSpecified = value;
                    this.OnPropertyChanged("merchantPromotionalCodeSpecified");
                }
            }
        }
        
        public bool customerPasswordChanged {
            get {
                return this.customerPasswordChangedField;
            }
            set {
                if ((customerPasswordChangedField.Equals(value) != true)) {
                    this.customerPasswordChangedField = value;
                    this.OnPropertyChanged("customerPasswordChanged");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerPasswordChangedSpecified {
            get {
                return this.customerPasswordChangedFieldSpecified;
            }
            set {
                if ((customerPasswordChangedFieldSpecified.Equals(value) != true)) {
                    this.customerPasswordChangedFieldSpecified = value;
                    this.OnPropertyChanged("customerPasswordChangedSpecified");
                }
            }
        }
        
        public bool customerBillingAddressChanged {
            get {
                return this.customerBillingAddressChangedField;
            }
            set {
                if ((customerBillingAddressChangedField.Equals(value) != true)) {
                    this.customerBillingAddressChangedField = value;
                    this.OnPropertyChanged("customerBillingAddressChanged");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerBillingAddressChangedSpecified {
            get {
                return this.customerBillingAddressChangedFieldSpecified;
            }
            set {
                if ((customerBillingAddressChangedFieldSpecified.Equals(value) != true)) {
                    this.customerBillingAddressChangedFieldSpecified = value;
                    this.OnPropertyChanged("customerBillingAddressChangedSpecified");
                }
            }
        }
        
        public bool customerEmailChanged {
            get {
                return this.customerEmailChangedField;
            }
            set {
                if ((customerEmailChangedField.Equals(value) != true)) {
                    this.customerEmailChangedField = value;
                    this.OnPropertyChanged("customerEmailChanged");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerEmailChangedSpecified {
            get {
                return this.customerEmailChangedFieldSpecified;
            }
            set {
                if ((customerEmailChangedFieldSpecified.Equals(value) != true)) {
                    this.customerEmailChangedFieldSpecified = value;
                    this.OnPropertyChanged("customerEmailChangedSpecified");
                }
            }
        }
        
        public bool customerPhoneChanged {
            get {
                return this.customerPhoneChangedField;
            }
            set {
                if ((customerPhoneChangedField.Equals(value) != true)) {
                    this.customerPhoneChangedField = value;
                    this.OnPropertyChanged("customerPhoneChanged");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customerPhoneChangedSpecified {
            get {
                return this.customerPhoneChangedFieldSpecified;
            }
            set {
                if ((customerPhoneChangedFieldSpecified.Equals(value) != true)) {
                    this.customerPhoneChangedFieldSpecified = value;
                    this.OnPropertyChanged("customerPhoneChangedSpecified");
                }
            }
        }
        
        public string secretQuestionCode {
            get {
                return this.secretQuestionCodeField;
            }
            set {
                if ((this.secretQuestionCodeField != null)) {
                    if ((secretQuestionCodeField.Equals(value) != true)) {
                        this.secretQuestionCodeField = value;
                        this.OnPropertyChanged("secretQuestionCode");
                    }
                }
                else {
                    this.secretQuestionCodeField = value;
                    this.OnPropertyChanged("secretQuestionCode");
                }
            }
        }
        
        public string secretQuestionAnswer {
            get {
                return this.secretQuestionAnswerField;
            }
            set {
                if ((this.secretQuestionAnswerField != null)) {
                    if ((secretQuestionAnswerField.Equals(value) != true)) {
                        this.secretQuestionAnswerField = value;
                        this.OnPropertyChanged("secretQuestionAnswer");
                    }
                }
                else {
                    this.secretQuestionAnswerField = value;
                    this.OnPropertyChanged("secretQuestionAnswer");
                }
            }
        }
        
        public string virtualAuthenticationKeyPresenceIndicator {
            get {
                return this.virtualAuthenticationKeyPresenceIndicatorField;
            }
            set {
                if ((this.virtualAuthenticationKeyPresenceIndicatorField != null)) {
                    if ((virtualAuthenticationKeyPresenceIndicatorField.Equals(value) != true)) {
                        this.virtualAuthenticationKeyPresenceIndicatorField = value;
                        this.OnPropertyChanged("virtualAuthenticationKeyPresenceIndicator");
                    }
                }
                else {
                    this.virtualAuthenticationKeyPresenceIndicatorField = value;
                    this.OnPropertyChanged("virtualAuthenticationKeyPresenceIndicator");
                }
            }
        }
        
        public string virtualAuthenticationKeyData {
            get {
                return this.virtualAuthenticationKeyDataField;
            }
            set {
                if ((this.virtualAuthenticationKeyDataField != null)) {
                    if ((virtualAuthenticationKeyDataField.Equals(value) != true)) {
                        this.virtualAuthenticationKeyDataField = value;
                        this.OnPropertyChanged("virtualAuthenticationKeyData");
                    }
                }
                else {
                    this.virtualAuthenticationKeyDataField = value;
                    this.OnPropertyChanged("virtualAuthenticationKeyData");
                }
            }
        }
        
        public int itemCategoryCode {
            get {
                return this.itemCategoryCodeField;
            }
            set {
                if ((itemCategoryCodeField.Equals(value) != true)) {
                    this.itemCategoryCodeField = value;
                    this.OnPropertyChanged("itemCategoryCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool itemCategoryCodeSpecified {
            get {
                return this.itemCategoryCodeFieldSpecified;
            }
            set {
                if ((itemCategoryCodeFieldSpecified.Equals(value) != true)) {
                    this.itemCategoryCodeFieldSpecified = value;
                    this.OnPropertyChanged("itemCategoryCodeSpecified");
                }
            }
        }
        
        public string authorizationSourcePlatform {
            get {
                return this.authorizationSourcePlatformField;
            }
            set {
                if ((this.authorizationSourcePlatformField != null)) {
                    if ((authorizationSourcePlatformField.Equals(value) != true)) {
                        this.authorizationSourcePlatformField = value;
                        this.OnPropertyChanged("authorizationSourcePlatform");
                    }
                }
                else {
                    this.authorizationSourcePlatformField = value;
                    this.OnPropertyChanged("authorizationSourcePlatform");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(billMeLaterRequest));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current billMeLaterRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an billMeLaterRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output billMeLaterRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out billMeLaterRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(billMeLaterRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out billMeLaterRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static billMeLaterRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((billMeLaterRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current billMeLaterRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an billMeLaterRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output billMeLaterRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out billMeLaterRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(billMeLaterRequest);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out billMeLaterRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static billMeLaterRequest LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this billMeLaterRequest object
        /// </summary>
        public virtual billMeLaterRequest Clone() {
            return ((billMeLaterRequest)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class billMeLaterResponseData : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long bmlMerchantIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string promotionalOfferCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int approvedTermsCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool approvedTermsCodeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long creditLineField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool creditLineFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string addressIndicatorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string loanToValueEstimatorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string riskEstimatorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string riskQueueAssignmentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long bmlMerchantId {
            get {
                return this.bmlMerchantIdField;
            }
            set {
                if ((bmlMerchantIdField.Equals(value) != true)) {
                    this.bmlMerchantIdField = value;
                    this.OnPropertyChanged("bmlMerchantId");
                }
            }
        }
        
        public string promotionalOfferCode {
            get {
                return this.promotionalOfferCodeField;
            }
            set {
                if ((this.promotionalOfferCodeField != null)) {
                    if ((promotionalOfferCodeField.Equals(value) != true)) {
                        this.promotionalOfferCodeField = value;
                        this.OnPropertyChanged("promotionalOfferCode");
                    }
                }
                else {
                    this.promotionalOfferCodeField = value;
                    this.OnPropertyChanged("promotionalOfferCode");
                }
            }
        }
        
        public int approvedTermsCode {
            get {
                return this.approvedTermsCodeField;
            }
            set {
                if ((approvedTermsCodeField.Equals(value) != true)) {
                    this.approvedTermsCodeField = value;
                    this.OnPropertyChanged("approvedTermsCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool approvedTermsCodeSpecified {
            get {
                return this.approvedTermsCodeFieldSpecified;
            }
            set {
                if ((approvedTermsCodeFieldSpecified.Equals(value) != true)) {
                    this.approvedTermsCodeFieldSpecified = value;
                    this.OnPropertyChanged("approvedTermsCodeSpecified");
                }
            }
        }
        
        public long creditLine {
            get {
                return this.creditLineField;
            }
            set {
                if ((creditLineField.Equals(value) != true)) {
                    this.creditLineField = value;
                    this.OnPropertyChanged("creditLine");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool creditLineSpecified {
            get {
                return this.creditLineFieldSpecified;
            }
            set {
                if ((creditLineFieldSpecified.Equals(value) != true)) {
                    this.creditLineFieldSpecified = value;
                    this.OnPropertyChanged("creditLineSpecified");
                }
            }
        }
        
        public string addressIndicator {
            get {
                return this.addressIndicatorField;
            }
            set {
                if ((this.addressIndicatorField != null)) {
                    if ((addressIndicatorField.Equals(value) != true)) {
                        this.addressIndicatorField = value;
                        this.OnPropertyChanged("addressIndicator");
                    }
                }
                else {
                    this.addressIndicatorField = value;
                    this.OnPropertyChanged("addressIndicator");
                }
            }
        }
        
        public string loanToValueEstimator {
            get {
                return this.loanToValueEstimatorField;
            }
            set {
                if ((this.loanToValueEstimatorField != null)) {
                    if ((loanToValueEstimatorField.Equals(value) != true)) {
                        this.loanToValueEstimatorField = value;
                        this.OnPropertyChanged("loanToValueEstimator");
                    }
                }
                else {
                    this.loanToValueEstimatorField = value;
                    this.OnPropertyChanged("loanToValueEstimator");
                }
            }
        }
        
        public string riskEstimator {
            get {
                return this.riskEstimatorField;
            }
            set {
                if ((this.riskEstimatorField != null)) {
                    if ((riskEstimatorField.Equals(value) != true)) {
                        this.riskEstimatorField = value;
                        this.OnPropertyChanged("riskEstimator");
                    }
                }
                else {
                    this.riskEstimatorField = value;
                    this.OnPropertyChanged("riskEstimator");
                }
            }
        }
        
        public string riskQueueAssignment {
            get {
                return this.riskQueueAssignmentField;
            }
            set {
                if ((this.riskQueueAssignmentField != null)) {
                    if ((riskQueueAssignmentField.Equals(value) != true)) {
                        this.riskQueueAssignmentField = value;
                        this.OnPropertyChanged("riskQueueAssignment");
                    }
                }
                else {
                    this.riskQueueAssignmentField = value;
                    this.OnPropertyChanged("riskQueueAssignment");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(billMeLaterResponseData));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current billMeLaterResponseData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an billMeLaterResponseData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output billMeLaterResponseData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out billMeLaterResponseData obj, out System.Exception exception) {
            exception = null;
            obj = default(billMeLaterResponseData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out billMeLaterResponseData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static billMeLaterResponseData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((billMeLaterResponseData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current billMeLaterResponseData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an billMeLaterResponseData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output billMeLaterResponseData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out billMeLaterResponseData obj, out System.Exception exception) {
            exception = null;
            obj = default(billMeLaterResponseData);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out billMeLaterResponseData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static billMeLaterResponseData LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this billMeLaterResponseData object
        /// </summary>
        public virtual billMeLaterResponseData Clone() {
            return ((billMeLaterResponseData)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class authorization : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customerInfo customerInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact shipToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardType cardField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private payPal paypalField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardTokenType tokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardPaypageType paypageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private billMeLaterRequest billMeLaterRequestField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private fraudCheckType cardholderAuthenticationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructionsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private pos posField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBillingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private govtTaxTypeEnum taxTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxTypeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedData enhancedDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private amexAggregatorData amexAggregatorDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool allowPartialAuthField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool allowPartialAuthFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private healthcareIIAS healthcareIIASField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private filteringType filteringField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private merchantDataType merchantDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private recyclingRequestType recyclingRequestField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public authorization() {
            this.recyclingRequestField = new recyclingRequestType();
            this.merchantDataField = new merchantDataType();
            this.filteringField = new filteringType();
            this.healthcareIIASField = new healthcareIIAS();
            this.amexAggregatorDataField = new amexAggregatorData();
            this.enhancedDataField = new enhancedData();
            this.customBillingField = new customBilling();
            this.posField = new pos();
            this.processingInstructionsField = new processingInstructions();
            this.cardholderAuthenticationField = new fraudCheckType();
            this.billMeLaterRequestField = new billMeLaterRequest();
            this.paypageField = new cardPaypageType();
            this.tokenField = new cardTokenType();
            this.paypalField = new payPal();
            this.cardField = new cardType();
            this.shipToAddressField = new contact();
            this.billToAddressField = new contact();
            this.customerInfoField = new customerInfo();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public customerInfo customerInfo {
            get {
                return this.customerInfoField;
            }
            set {
                if ((this.customerInfoField != null)) {
                    if ((customerInfoField.Equals(value) != true)) {
                        this.customerInfoField = value;
                        this.OnPropertyChanged("customerInfo");
                    }
                }
                else {
                    this.customerInfoField = value;
                    this.OnPropertyChanged("customerInfo");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public contact shipToAddress {
            get {
                return this.shipToAddressField;
            }
            set {
                if ((this.shipToAddressField != null)) {
                    if ((shipToAddressField.Equals(value) != true)) {
                        this.shipToAddressField = value;
                        this.OnPropertyChanged("shipToAddress");
                    }
                }
                else {
                    this.shipToAddressField = value;
                    this.OnPropertyChanged("shipToAddress");
                }
            }
        }
        
        public cardType card {
            get {
                return this.cardField;
            }
            set {
                if ((this.cardField != null)) {
                    if ((cardField.Equals(value) != true)) {
                        this.cardField = value;
                        this.OnPropertyChanged("card");
                    }
                }
                else {
                    this.cardField = value;
                    this.OnPropertyChanged("card");
                }
            }
        }
        
        public payPal paypal {
            get {
                return this.paypalField;
            }
            set {
                if ((this.paypalField != null)) {
                    if ((paypalField.Equals(value) != true)) {
                        this.paypalField = value;
                        this.OnPropertyChanged("paypal");
                    }
                }
                else {
                    this.paypalField = value;
                    this.OnPropertyChanged("paypal");
                }
            }
        }
        
        public cardTokenType token {
            get {
                return this.tokenField;
            }
            set {
                if ((this.tokenField != null)) {
                    if ((tokenField.Equals(value) != true)) {
                        this.tokenField = value;
                        this.OnPropertyChanged("token");
                    }
                }
                else {
                    this.tokenField = value;
                    this.OnPropertyChanged("token");
                }
            }
        }
        
        public cardPaypageType paypage {
            get {
                return this.paypageField;
            }
            set {
                if ((this.paypageField != null)) {
                    if ((paypageField.Equals(value) != true)) {
                        this.paypageField = value;
                        this.OnPropertyChanged("paypage");
                    }
                }
                else {
                    this.paypageField = value;
                    this.OnPropertyChanged("paypage");
                }
            }
        }
        
        public billMeLaterRequest billMeLaterRequest {
            get {
                return this.billMeLaterRequestField;
            }
            set {
                if ((this.billMeLaterRequestField != null)) {
                    if ((billMeLaterRequestField.Equals(value) != true)) {
                        this.billMeLaterRequestField = value;
                        this.OnPropertyChanged("billMeLaterRequest");
                    }
                }
                else {
                    this.billMeLaterRequestField = value;
                    this.OnPropertyChanged("billMeLaterRequest");
                }
            }
        }
        
        public fraudCheckType cardholderAuthentication {
            get {
                return this.cardholderAuthenticationField;
            }
            set {
                if ((this.cardholderAuthenticationField != null)) {
                    if ((cardholderAuthenticationField.Equals(value) != true)) {
                        this.cardholderAuthenticationField = value;
                        this.OnPropertyChanged("cardholderAuthentication");
                    }
                }
                else {
                    this.cardholderAuthenticationField = value;
                    this.OnPropertyChanged("cardholderAuthentication");
                }
            }
        }
        
        public processingInstructions processingInstructions {
            get {
                return this.processingInstructionsField;
            }
            set {
                if ((this.processingInstructionsField != null)) {
                    if ((processingInstructionsField.Equals(value) != true)) {
                        this.processingInstructionsField = value;
                        this.OnPropertyChanged("processingInstructions");
                    }
                }
                else {
                    this.processingInstructionsField = value;
                    this.OnPropertyChanged("processingInstructions");
                }
            }
        }
        
        public pos pos {
            get {
                return this.posField;
            }
            set {
                if ((this.posField != null)) {
                    if ((posField.Equals(value) != true)) {
                        this.posField = value;
                        this.OnPropertyChanged("pos");
                    }
                }
                else {
                    this.posField = value;
                    this.OnPropertyChanged("pos");
                }
            }
        }
        
        public customBilling customBilling {
            get {
                return this.customBillingField;
            }
            set {
                if ((this.customBillingField != null)) {
                    if ((customBillingField.Equals(value) != true)) {
                        this.customBillingField = value;
                        this.OnPropertyChanged("customBilling");
                    }
                }
                else {
                    this.customBillingField = value;
                    this.OnPropertyChanged("customBilling");
                }
            }
        }
        
        public govtTaxTypeEnum taxType {
            get {
                return this.taxTypeField;
            }
            set {
                if ((taxTypeField.Equals(value) != true)) {
                    this.taxTypeField = value;
                    this.OnPropertyChanged("taxType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxTypeSpecified {
            get {
                return this.taxTypeFieldSpecified;
            }
            set {
                if ((taxTypeFieldSpecified.Equals(value) != true)) {
                    this.taxTypeFieldSpecified = value;
                    this.OnPropertyChanged("taxTypeSpecified");
                }
            }
        }
        
        public enhancedData enhancedData {
            get {
                return this.enhancedDataField;
            }
            set {
                if ((this.enhancedDataField != null)) {
                    if ((enhancedDataField.Equals(value) != true)) {
                        this.enhancedDataField = value;
                        this.OnPropertyChanged("enhancedData");
                    }
                }
                else {
                    this.enhancedDataField = value;
                    this.OnPropertyChanged("enhancedData");
                }
            }
        }
        
        public amexAggregatorData amexAggregatorData {
            get {
                return this.amexAggregatorDataField;
            }
            set {
                if ((this.amexAggregatorDataField != null)) {
                    if ((amexAggregatorDataField.Equals(value) != true)) {
                        this.amexAggregatorDataField = value;
                        this.OnPropertyChanged("amexAggregatorData");
                    }
                }
                else {
                    this.amexAggregatorDataField = value;
                    this.OnPropertyChanged("amexAggregatorData");
                }
            }
        }
        
        public bool allowPartialAuth {
            get {
                return this.allowPartialAuthField;
            }
            set {
                if ((allowPartialAuthField.Equals(value) != true)) {
                    this.allowPartialAuthField = value;
                    this.OnPropertyChanged("allowPartialAuth");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowPartialAuthSpecified {
            get {
                return this.allowPartialAuthFieldSpecified;
            }
            set {
                if ((allowPartialAuthFieldSpecified.Equals(value) != true)) {
                    this.allowPartialAuthFieldSpecified = value;
                    this.OnPropertyChanged("allowPartialAuthSpecified");
                }
            }
        }
        
        public healthcareIIAS healthcareIIAS {
            get {
                return this.healthcareIIASField;
            }
            set {
                if ((this.healthcareIIASField != null)) {
                    if ((healthcareIIASField.Equals(value) != true)) {
                        this.healthcareIIASField = value;
                        this.OnPropertyChanged("healthcareIIAS");
                    }
                }
                else {
                    this.healthcareIIASField = value;
                    this.OnPropertyChanged("healthcareIIAS");
                }
            }
        }
        
        public filteringType filtering {
            get {
                return this.filteringField;
            }
            set {
                if ((this.filteringField != null)) {
                    if ((filteringField.Equals(value) != true)) {
                        this.filteringField = value;
                        this.OnPropertyChanged("filtering");
                    }
                }
                else {
                    this.filteringField = value;
                    this.OnPropertyChanged("filtering");
                }
            }
        }
        
        public merchantDataType merchantData {
            get {
                return this.merchantDataField;
            }
            set {
                if ((this.merchantDataField != null)) {
                    if ((merchantDataField.Equals(value) != true)) {
                        this.merchantDataField = value;
                        this.OnPropertyChanged("merchantData");
                    }
                }
                else {
                    this.merchantDataField = value;
                    this.OnPropertyChanged("merchantData");
                }
            }
        }
        
        public recyclingRequestType recyclingRequest {
            get {
                return this.recyclingRequestField;
            }
            set {
                if ((this.recyclingRequestField != null)) {
                    if ((recyclingRequestField.Equals(value) != true)) {
                        this.recyclingRequestField = value;
                        this.OnPropertyChanged("recyclingRequest");
                    }
                }
                else {
                    this.recyclingRequestField = value;
                    this.OnPropertyChanged("recyclingRequest");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(authorization));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current authorization object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an authorization object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output authorization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out authorization obj, out System.Exception exception) {
            exception = null;
            obj = default(authorization);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out authorization obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static authorization Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((authorization)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current authorization object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an authorization object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output authorization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out authorization obj, out System.Exception exception) {
            exception = null;
            obj = default(authorization);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out authorization obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static authorization LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this authorization object
        /// </summary>
        public virtual authorization Clone() {
            return ((authorization)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum orderSourceType {
        
        /// <remarks/>
        ecommerce,
        
        /// <remarks/>
        installment,
        
        /// <remarks/>
        mailorder,
        
        /// <remarks/>
        recurring,
        
        /// <remarks/>
        retail,
        
        /// <remarks/>
        telephone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3dsAuthenticated")]
        Item3dsAuthenticated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3dsAttempted")]
        Item3dsAttempted,
        
        /// <remarks/>
        recurringtel,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class contact : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string firstNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string middleInitialField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lastNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string companyNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string addressLine1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string addressLine2Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string addressLine3Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cityField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string stateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string zipField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private countryTypeEnum countryField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool countryFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string emailField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string phoneField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((this.firstNameField != null)) {
                    if ((firstNameField.Equals(value) != true)) {
                        this.firstNameField = value;
                        this.OnPropertyChanged("firstName");
                    }
                }
                else {
                    this.firstNameField = value;
                    this.OnPropertyChanged("firstName");
                }
            }
        }
        
        public string middleInitial {
            get {
                return this.middleInitialField;
            }
            set {
                if ((this.middleInitialField != null)) {
                    if ((middleInitialField.Equals(value) != true)) {
                        this.middleInitialField = value;
                        this.OnPropertyChanged("middleInitial");
                    }
                }
                else {
                    this.middleInitialField = value;
                    this.OnPropertyChanged("middleInitial");
                }
            }
        }
        
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((this.lastNameField != null)) {
                    if ((lastNameField.Equals(value) != true)) {
                        this.lastNameField = value;
                        this.OnPropertyChanged("lastName");
                    }
                }
                else {
                    this.lastNameField = value;
                    this.OnPropertyChanged("lastName");
                }
            }
        }
        
        public string companyName {
            get {
                return this.companyNameField;
            }
            set {
                if ((this.companyNameField != null)) {
                    if ((companyNameField.Equals(value) != true)) {
                        this.companyNameField = value;
                        this.OnPropertyChanged("companyName");
                    }
                }
                else {
                    this.companyNameField = value;
                    this.OnPropertyChanged("companyName");
                }
            }
        }
        
        public string addressLine1 {
            get {
                return this.addressLine1Field;
            }
            set {
                if ((this.addressLine1Field != null)) {
                    if ((addressLine1Field.Equals(value) != true)) {
                        this.addressLine1Field = value;
                        this.OnPropertyChanged("addressLine1");
                    }
                }
                else {
                    this.addressLine1Field = value;
                    this.OnPropertyChanged("addressLine1");
                }
            }
        }
        
        public string addressLine2 {
            get {
                return this.addressLine2Field;
            }
            set {
                if ((this.addressLine2Field != null)) {
                    if ((addressLine2Field.Equals(value) != true)) {
                        this.addressLine2Field = value;
                        this.OnPropertyChanged("addressLine2");
                    }
                }
                else {
                    this.addressLine2Field = value;
                    this.OnPropertyChanged("addressLine2");
                }
            }
        }
        
        public string addressLine3 {
            get {
                return this.addressLine3Field;
            }
            set {
                if ((this.addressLine3Field != null)) {
                    if ((addressLine3Field.Equals(value) != true)) {
                        this.addressLine3Field = value;
                        this.OnPropertyChanged("addressLine3");
                    }
                }
                else {
                    this.addressLine3Field = value;
                    this.OnPropertyChanged("addressLine3");
                }
            }
        }
        
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((this.cityField != null)) {
                    if ((cityField.Equals(value) != true)) {
                        this.cityField = value;
                        this.OnPropertyChanged("city");
                    }
                }
                else {
                    this.cityField = value;
                    this.OnPropertyChanged("city");
                }
            }
        }
        
        public string state {
            get {
                return this.stateField;
            }
            set {
                if ((this.stateField != null)) {
                    if ((stateField.Equals(value) != true)) {
                        this.stateField = value;
                        this.OnPropertyChanged("state");
                    }
                }
                else {
                    this.stateField = value;
                    this.OnPropertyChanged("state");
                }
            }
        }
        
        public string zip {
            get {
                return this.zipField;
            }
            set {
                if ((this.zipField != null)) {
                    if ((zipField.Equals(value) != true)) {
                        this.zipField = value;
                        this.OnPropertyChanged("zip");
                    }
                }
                else {
                    this.zipField = value;
                    this.OnPropertyChanged("zip");
                }
            }
        }
        
        public countryTypeEnum country {
            get {
                return this.countryField;
            }
            set {
                if ((countryField.Equals(value) != true)) {
                    this.countryField = value;
                    this.OnPropertyChanged("country");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool countrySpecified {
            get {
                return this.countryFieldSpecified;
            }
            set {
                if ((countryFieldSpecified.Equals(value) != true)) {
                    this.countryFieldSpecified = value;
                    this.OnPropertyChanged("countrySpecified");
                }
            }
        }
        
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((this.emailField != null)) {
                    if ((emailField.Equals(value) != true)) {
                        this.emailField = value;
                        this.OnPropertyChanged("email");
                    }
                }
                else {
                    this.emailField = value;
                    this.OnPropertyChanged("email");
                }
            }
        }
        
        public string phone {
            get {
                return this.phoneField;
            }
            set {
                if ((this.phoneField != null)) {
                    if ((phoneField.Equals(value) != true)) {
                        this.phoneField = value;
                        this.OnPropertyChanged("phone");
                    }
                }
                else {
                    this.phoneField = value;
                    this.OnPropertyChanged("phone");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(contact));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current contact object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an contact object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output contact object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out contact obj, out System.Exception exception) {
            exception = null;
            obj = default(contact);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out contact obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static contact Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((contact)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current contact object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an contact object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output contact object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out contact obj, out System.Exception exception) {
            exception = null;
            obj = default(contact);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out contact obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static contact LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this contact object
        /// </summary>
        public virtual contact Clone() {
            return ((contact)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum countryTypeEnum {
        
        /// <remarks/>
        USA,
        
        /// <remarks/>
        AF,
        
        /// <remarks/>
        AX,
        
        /// <remarks/>
        AL,
        
        /// <remarks/>
        DZ,
        
        /// <remarks/>
        AS,
        
        /// <remarks/>
        AD,
        
        /// <remarks/>
        AO,
        
        /// <remarks/>
        AI,
        
        /// <remarks/>
        AQ,
        
        /// <remarks/>
        AG,
        
        /// <remarks/>
        AR,
        
        /// <remarks/>
        AM,
        
        /// <remarks/>
        AW,
        
        /// <remarks/>
        AU,
        
        /// <remarks/>
        AT,
        
        /// <remarks/>
        AZ,
        
        /// <remarks/>
        BS,
        
        /// <remarks/>
        BH,
        
        /// <remarks/>
        BD,
        
        /// <remarks/>
        BB,
        
        /// <remarks/>
        BY,
        
        /// <remarks/>
        BE,
        
        /// <remarks/>
        BZ,
        
        /// <remarks/>
        BJ,
        
        /// <remarks/>
        BM,
        
        /// <remarks/>
        BT,
        
        /// <remarks/>
        BO,
        
        /// <remarks/>
        BQ,
        
        /// <remarks/>
        BA,
        
        /// <remarks/>
        BW,
        
        /// <remarks/>
        BV,
        
        /// <remarks/>
        BR,
        
        /// <remarks/>
        IO,
        
        /// <remarks/>
        BN,
        
        /// <remarks/>
        BG,
        
        /// <remarks/>
        BF,
        
        /// <remarks/>
        BI,
        
        /// <remarks/>
        KH,
        
        /// <remarks/>
        CM,
        
        /// <remarks/>
        CA,
        
        /// <remarks/>
        CV,
        
        /// <remarks/>
        KY,
        
        /// <remarks/>
        CF,
        
        /// <remarks/>
        TD,
        
        /// <remarks/>
        CL,
        
        /// <remarks/>
        CN,
        
        /// <remarks/>
        CX,
        
        /// <remarks/>
        CC,
        
        /// <remarks/>
        CO,
        
        /// <remarks/>
        KM,
        
        /// <remarks/>
        CG,
        
        /// <remarks/>
        CD,
        
        /// <remarks/>
        CK,
        
        /// <remarks/>
        CR,
        
        /// <remarks/>
        CI,
        
        /// <remarks/>
        HR,
        
        /// <remarks/>
        CU,
        
        /// <remarks/>
        CW,
        
        /// <remarks/>
        CY,
        
        /// <remarks/>
        CZ,
        
        /// <remarks/>
        DK,
        
        /// <remarks/>
        DJ,
        
        /// <remarks/>
        DM,
        
        /// <remarks/>
        DO,
        
        /// <remarks/>
        TL,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        EG,
        
        /// <remarks/>
        SV,
        
        /// <remarks/>
        GQ,
        
        /// <remarks/>
        ER,
        
        /// <remarks/>
        EE,
        
        /// <remarks/>
        ET,
        
        /// <remarks/>
        FK,
        
        /// <remarks/>
        FO,
        
        /// <remarks/>
        FJ,
        
        /// <remarks/>
        FI,
        
        /// <remarks/>
        FR,
        
        /// <remarks/>
        GF,
        
        /// <remarks/>
        PF,
        
        /// <remarks/>
        TF,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        GM,
        
        /// <remarks/>
        GE,
        
        /// <remarks/>
        DE,
        
        /// <remarks/>
        GH,
        
        /// <remarks/>
        GI,
        
        /// <remarks/>
        GR,
        
        /// <remarks/>
        GL,
        
        /// <remarks/>
        GD,
        
        /// <remarks/>
        GP,
        
        /// <remarks/>
        GU,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        GG,
        
        /// <remarks/>
        GN,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        GY,
        
        /// <remarks/>
        HT,
        
        /// <remarks/>
        HM,
        
        /// <remarks/>
        HN,
        
        /// <remarks/>
        HK,
        
        /// <remarks/>
        HU,
        
        /// <remarks/>
        IS,
        
        /// <remarks/>
        IN,
        
        /// <remarks/>
        ID,
        
        /// <remarks/>
        IR,
        
        /// <remarks/>
        IQ,
        
        /// <remarks/>
        IE,
        
        /// <remarks/>
        IM,
        
        /// <remarks/>
        IL,
        
        /// <remarks/>
        IT,
        
        /// <remarks/>
        JM,
        
        /// <remarks/>
        JP,
        
        /// <remarks/>
        JE,
        
        /// <remarks/>
        JO,
        
        /// <remarks/>
        KZ,
        
        /// <remarks/>
        KE,
        
        /// <remarks/>
        KI,
        
        /// <remarks/>
        KP,
        
        /// <remarks/>
        KR,
        
        /// <remarks/>
        KW,
        
        /// <remarks/>
        KG,
        
        /// <remarks/>
        LA,
        
        /// <remarks/>
        LV,
        
        /// <remarks/>
        LB,
        
        /// <remarks/>
        LS,
        
        /// <remarks/>
        LR,
        
        /// <remarks/>
        LY,
        
        /// <remarks/>
        LI,
        
        /// <remarks/>
        LT,
        
        /// <remarks/>
        LU,
        
        /// <remarks/>
        MO,
        
        /// <remarks/>
        MK,
        
        /// <remarks/>
        MG,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        MY,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        ML,
        
        /// <remarks/>
        MT,
        
        /// <remarks/>
        MH,
        
        /// <remarks/>
        MQ,
        
        /// <remarks/>
        MR,
        
        /// <remarks/>
        MU,
        
        /// <remarks/>
        YT,
        
        /// <remarks/>
        MX,
        
        /// <remarks/>
        FM,
        
        /// <remarks/>
        MD,
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        MZ,
        
        /// <remarks/>
        MM,
        
        /// <remarks/>
        NA,
        
        /// <remarks/>
        NR,
        
        /// <remarks/>
        NP,
        
        /// <remarks/>
        NL,
        
        /// <remarks/>
        AN,
        
        /// <remarks/>
        NC,
        
        /// <remarks/>
        NZ,
        
        /// <remarks/>
        NI,
        
        /// <remarks/>
        NE,
        
        /// <remarks/>
        NG,
        
        /// <remarks/>
        NU,
        
        /// <remarks/>
        NF,
        
        /// <remarks/>
        MP,
        
        /// <remarks/>
        NO,
        
        /// <remarks/>
        OM,
        
        /// <remarks/>
        PK,
        
        /// <remarks/>
        PW,
        
        /// <remarks/>
        PS,
        
        /// <remarks/>
        PA,
        
        /// <remarks/>
        PG,
        
        /// <remarks/>
        PY,
        
        /// <remarks/>
        PE,
        
        /// <remarks/>
        PH,
        
        /// <remarks/>
        PN,
        
        /// <remarks/>
        PL,
        
        /// <remarks/>
        PT,
        
        /// <remarks/>
        PR,
        
        /// <remarks/>
        QA,
        
        /// <remarks/>
        RE,
        
        /// <remarks/>
        RO,
        
        /// <remarks/>
        RU,
        
        /// <remarks/>
        RW,
        
        /// <remarks/>
        BL,
        
        /// <remarks/>
        KN,
        
        /// <remarks/>
        LC,
        
        /// <remarks/>
        MF,
        
        /// <remarks/>
        VC,
        
        /// <remarks/>
        WS,
        
        /// <remarks/>
        SM,
        
        /// <remarks/>
        ST,
        
        /// <remarks/>
        SA,
        
        /// <remarks/>
        SN,
        
        /// <remarks/>
        SC,
        
        /// <remarks/>
        SL,
        
        /// <remarks/>
        SG,
        
        /// <remarks/>
        SX,
        
        /// <remarks/>
        SK,
        
        /// <remarks/>
        SI,
        
        /// <remarks/>
        SB,
        
        /// <remarks/>
        SO,
        
        /// <remarks/>
        ZA,
        
        /// <remarks/>
        GS,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        LK,
        
        /// <remarks/>
        SH,
        
        /// <remarks/>
        PM,
        
        /// <remarks/>
        SD,
        
        /// <remarks/>
        SR,
        
        /// <remarks/>
        SJ,
        
        /// <remarks/>
        SZ,
        
        /// <remarks/>
        SE,
        
        /// <remarks/>
        CH,
        
        /// <remarks/>
        SY,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        TJ,
        
        /// <remarks/>
        TZ,
        
        /// <remarks/>
        TH,
        
        /// <remarks/>
        TG,
        
        /// <remarks/>
        TK,
        
        /// <remarks/>
        TO,
        
        /// <remarks/>
        TT,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        TR,
        
        /// <remarks/>
        TM,
        
        /// <remarks/>
        TC,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        UG,
        
        /// <remarks/>
        UA,
        
        /// <remarks/>
        AE,
        
        /// <remarks/>
        GB,
        
        /// <remarks/>
        US,
        
        /// <remarks/>
        UM,
        
        /// <remarks/>
        UY,
        
        /// <remarks/>
        UZ,
        
        /// <remarks/>
        VU,
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        VE,
        
        /// <remarks/>
        VN,
        
        /// <remarks/>
        VG,
        
        /// <remarks/>
        VI,
        
        /// <remarks/>
        WF,
        
        /// <remarks/>
        EH,
        
        /// <remarks/>
        YE,
        
        /// <remarks/>
        ZM,
        
        /// <remarks/>
        ZW,
        
        /// <remarks/>
        RS,
        
        /// <remarks/>
        ME,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class cardType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string numberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string expDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string trackField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cardValidationNumField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        public string number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField != null)) {
                    if ((numberField.Equals(value) != true)) {
                        this.numberField = value;
                        this.OnPropertyChanged("number");
                    }
                }
                else {
                    this.numberField = value;
                    this.OnPropertyChanged("number");
                }
            }
        }
        
        public string expDate {
            get {
                return this.expDateField;
            }
            set {
                if ((this.expDateField != null)) {
                    if ((expDateField.Equals(value) != true)) {
                        this.expDateField = value;
                        this.OnPropertyChanged("expDate");
                    }
                }
                else {
                    this.expDateField = value;
                    this.OnPropertyChanged("expDate");
                }
            }
        }
        
        public string track {
            get {
                return this.trackField;
            }
            set {
                if ((this.trackField != null)) {
                    if ((trackField.Equals(value) != true)) {
                        this.trackField = value;
                        this.OnPropertyChanged("track");
                    }
                }
                else {
                    this.trackField = value;
                    this.OnPropertyChanged("track");
                }
            }
        }
        
        public string cardValidationNum {
            get {
                return this.cardValidationNumField;
            }
            set {
                if ((this.cardValidationNumField != null)) {
                    if ((cardValidationNumField.Equals(value) != true)) {
                        this.cardValidationNumField = value;
                        this.OnPropertyChanged("cardValidationNum");
                    }
                }
                else {
                    this.cardValidationNumField = value;
                    this.OnPropertyChanged("cardValidationNum");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(cardType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cardType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an cardType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output cardType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out cardType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out cardType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static cardType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((cardType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current cardType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an cardType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cardType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cardType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out cardType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static cardType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this cardType object
        /// </summary>
        public virtual cardType Clone() {
            return ((cardType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum methodOfPaymentTypeEnum {
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        VI,
        
        /// <remarks/>
        AX,
        
        /// <remarks/>
        DC,
        
        /// <remarks/>
        DI,
        
        /// <remarks/>
        PP,
        
        /// <remarks/>
        JC,
        
        /// <remarks/>
        BL,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("")]
        Item,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class payPal : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string payerIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string transactionIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string payerId {
            get {
                return this.payerIdField;
            }
            set {
                if ((this.payerIdField != null)) {
                    if ((payerIdField.Equals(value) != true)) {
                        this.payerIdField = value;
                        this.OnPropertyChanged("payerId");
                    }
                }
                else {
                    this.payerIdField = value;
                    this.OnPropertyChanged("payerId");
                }
            }
        }
        
        public string token {
            get {
                return this.tokenField;
            }
            set {
                if ((this.tokenField != null)) {
                    if ((tokenField.Equals(value) != true)) {
                        this.tokenField = value;
                        this.OnPropertyChanged("token");
                    }
                }
                else {
                    this.tokenField = value;
                    this.OnPropertyChanged("token");
                }
            }
        }
        
        public string transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                if ((this.transactionIdField != null)) {
                    if ((transactionIdField.Equals(value) != true)) {
                        this.transactionIdField = value;
                        this.OnPropertyChanged("transactionId");
                    }
                }
                else {
                    this.transactionIdField = value;
                    this.OnPropertyChanged("transactionId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(payPal));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current payPal object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an payPal object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output payPal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out payPal obj, out System.Exception exception) {
            exception = null;
            obj = default(payPal);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out payPal obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static payPal Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((payPal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current payPal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an payPal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output payPal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out payPal obj, out System.Exception exception) {
            exception = null;
            obj = default(payPal);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out payPal obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static payPal LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this payPal object
        /// </summary>
        public virtual payPal Clone() {
            return ((payPal)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class cardTokenType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string litleTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string expDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cardValidationNumField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool typeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string litleToken {
            get {
                return this.litleTokenField;
            }
            set {
                if ((this.litleTokenField != null)) {
                    if ((litleTokenField.Equals(value) != true)) {
                        this.litleTokenField = value;
                        this.OnPropertyChanged("litleToken");
                    }
                }
                else {
                    this.litleTokenField = value;
                    this.OnPropertyChanged("litleToken");
                }
            }
        }
        
        public string expDate {
            get {
                return this.expDateField;
            }
            set {
                if ((this.expDateField != null)) {
                    if ((expDateField.Equals(value) != true)) {
                        this.expDateField = value;
                        this.OnPropertyChanged("expDate");
                    }
                }
                else {
                    this.expDateField = value;
                    this.OnPropertyChanged("expDate");
                }
            }
        }
        
        public string cardValidationNum {
            get {
                return this.cardValidationNumField;
            }
            set {
                if ((this.cardValidationNumField != null)) {
                    if ((cardValidationNumField.Equals(value) != true)) {
                        this.cardValidationNumField = value;
                        this.OnPropertyChanged("cardValidationNum");
                    }
                }
                else {
                    this.cardValidationNumField = value;
                    this.OnPropertyChanged("cardValidationNum");
                }
            }
        }
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("typeSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(cardTokenType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cardTokenType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an cardTokenType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output cardTokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out cardTokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardTokenType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out cardTokenType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static cardTokenType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((cardTokenType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current cardTokenType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an cardTokenType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cardTokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cardTokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardTokenType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out cardTokenType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static cardTokenType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this cardTokenType object
        /// </summary>
        public virtual cardTokenType Clone() {
            return ((cardTokenType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class cardPaypageType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string paypageRegistrationIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string expDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cardValidationNumField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool typeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string paypageRegistrationId {
            get {
                return this.paypageRegistrationIdField;
            }
            set {
                if ((this.paypageRegistrationIdField != null)) {
                    if ((paypageRegistrationIdField.Equals(value) != true)) {
                        this.paypageRegistrationIdField = value;
                        this.OnPropertyChanged("paypageRegistrationId");
                    }
                }
                else {
                    this.paypageRegistrationIdField = value;
                    this.OnPropertyChanged("paypageRegistrationId");
                }
            }
        }
        
        public string expDate {
            get {
                return this.expDateField;
            }
            set {
                if ((this.expDateField != null)) {
                    if ((expDateField.Equals(value) != true)) {
                        this.expDateField = value;
                        this.OnPropertyChanged("expDate");
                    }
                }
                else {
                    this.expDateField = value;
                    this.OnPropertyChanged("expDate");
                }
            }
        }
        
        public string cardValidationNum {
            get {
                return this.cardValidationNumField;
            }
            set {
                if ((this.cardValidationNumField != null)) {
                    if ((cardValidationNumField.Equals(value) != true)) {
                        this.cardValidationNumField = value;
                        this.OnPropertyChanged("cardValidationNum");
                    }
                }
                else {
                    this.cardValidationNumField = value;
                    this.OnPropertyChanged("cardValidationNum");
                }
            }
        }
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("typeSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(cardPaypageType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cardPaypageType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an cardPaypageType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output cardPaypageType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out cardPaypageType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardPaypageType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out cardPaypageType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static cardPaypageType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((cardPaypageType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current cardPaypageType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an cardPaypageType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cardPaypageType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cardPaypageType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardPaypageType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out cardPaypageType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static cardPaypageType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this cardPaypageType object
        /// </summary>
        public virtual cardPaypageType Clone() {
            return ((cardPaypageType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class fraudCheckType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authenticationValueField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authenticationTransactionIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string customerIpAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool authenticatedByMerchantField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool authenticatedByMerchantFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string authenticationValue {
            get {
                return this.authenticationValueField;
            }
            set {
                if ((this.authenticationValueField != null)) {
                    if ((authenticationValueField.Equals(value) != true)) {
                        this.authenticationValueField = value;
                        this.OnPropertyChanged("authenticationValue");
                    }
                }
                else {
                    this.authenticationValueField = value;
                    this.OnPropertyChanged("authenticationValue");
                }
            }
        }
        
        public string authenticationTransactionId {
            get {
                return this.authenticationTransactionIdField;
            }
            set {
                if ((this.authenticationTransactionIdField != null)) {
                    if ((authenticationTransactionIdField.Equals(value) != true)) {
                        this.authenticationTransactionIdField = value;
                        this.OnPropertyChanged("authenticationTransactionId");
                    }
                }
                else {
                    this.authenticationTransactionIdField = value;
                    this.OnPropertyChanged("authenticationTransactionId");
                }
            }
        }
        
        public string customerIpAddress {
            get {
                return this.customerIpAddressField;
            }
            set {
                if ((this.customerIpAddressField != null)) {
                    if ((customerIpAddressField.Equals(value) != true)) {
                        this.customerIpAddressField = value;
                        this.OnPropertyChanged("customerIpAddress");
                    }
                }
                else {
                    this.customerIpAddressField = value;
                    this.OnPropertyChanged("customerIpAddress");
                }
            }
        }
        
        public bool authenticatedByMerchant {
            get {
                return this.authenticatedByMerchantField;
            }
            set {
                if ((authenticatedByMerchantField.Equals(value) != true)) {
                    this.authenticatedByMerchantField = value;
                    this.OnPropertyChanged("authenticatedByMerchant");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool authenticatedByMerchantSpecified {
            get {
                return this.authenticatedByMerchantFieldSpecified;
            }
            set {
                if ((authenticatedByMerchantFieldSpecified.Equals(value) != true)) {
                    this.authenticatedByMerchantFieldSpecified = value;
                    this.OnPropertyChanged("authenticatedByMerchantSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(fraudCheckType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current fraudCheckType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an fraudCheckType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output fraudCheckType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out fraudCheckType obj, out System.Exception exception) {
            exception = null;
            obj = default(fraudCheckType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out fraudCheckType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static fraudCheckType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((fraudCheckType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current fraudCheckType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an fraudCheckType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output fraudCheckType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out fraudCheckType obj, out System.Exception exception) {
            exception = null;
            obj = default(fraudCheckType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out fraudCheckType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static fraudCheckType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this fraudCheckType object
        /// </summary>
        public virtual fraudCheckType Clone() {
            return ((fraudCheckType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class processingInstructions : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool bypassVelocityCheckField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool bypassVelocityCheckFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public bool bypassVelocityCheck {
            get {
                return this.bypassVelocityCheckField;
            }
            set {
                if ((bypassVelocityCheckField.Equals(value) != true)) {
                    this.bypassVelocityCheckField = value;
                    this.OnPropertyChanged("bypassVelocityCheck");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bypassVelocityCheckSpecified {
            get {
                return this.bypassVelocityCheckFieldSpecified;
            }
            set {
                if ((bypassVelocityCheckFieldSpecified.Equals(value) != true)) {
                    this.bypassVelocityCheckFieldSpecified = value;
                    this.OnPropertyChanged("bypassVelocityCheckSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(processingInstructions));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current processingInstructions object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an processingInstructions object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output processingInstructions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out processingInstructions obj, out System.Exception exception) {
            exception = null;
            obj = default(processingInstructions);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out processingInstructions obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static processingInstructions Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((processingInstructions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current processingInstructions object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an processingInstructions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output processingInstructions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out processingInstructions obj, out System.Exception exception) {
            exception = null;
            obj = default(processingInstructions);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out processingInstructions obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static processingInstructions LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this processingInstructions object
        /// </summary>
        public virtual processingInstructions Clone() {
            return ((processingInstructions)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class pos : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private posCapabilityTypeEnum capabilityField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private posEntryModeTypeEnum entryModeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private posCardholderIdTypeEnum cardholderIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public posCapabilityTypeEnum capability {
            get {
                return this.capabilityField;
            }
            set {
                if ((capabilityField.Equals(value) != true)) {
                    this.capabilityField = value;
                    this.OnPropertyChanged("capability");
                }
            }
        }
        
        public posEntryModeTypeEnum entryMode {
            get {
                return this.entryModeField;
            }
            set {
                if ((entryModeField.Equals(value) != true)) {
                    this.entryModeField = value;
                    this.OnPropertyChanged("entryMode");
                }
            }
        }
        
        public posCardholderIdTypeEnum cardholderId {
            get {
                return this.cardholderIdField;
            }
            set {
                if ((cardholderIdField.Equals(value) != true)) {
                    this.cardholderIdField = value;
                    this.OnPropertyChanged("cardholderId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(pos));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current pos object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an pos object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output pos object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out pos obj, out System.Exception exception) {
            exception = null;
            obj = default(pos);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out pos obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static pos Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((pos)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current pos object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an pos object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output pos object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out pos obj, out System.Exception exception) {
            exception = null;
            obj = default(pos);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out pos obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static pos LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this pos object
        /// </summary>
        public virtual pos Clone() {
            return ((pos)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum posCapabilityTypeEnum {
        
        /// <remarks/>
        notused,
        
        /// <remarks/>
        magstripe,
        
        /// <remarks/>
        keyedonly,
    }
    
    public enum posEntryModeTypeEnum {
        
        /// <remarks/>
        notused,
        
        /// <remarks/>
        keyed,
        
        /// <remarks/>
        track1,
        
        /// <remarks/>
        track2,
        
        /// <remarks/>
        completeread,
    }
    
    public enum posCardholderIdTypeEnum {
        
        /// <remarks/>
        signature,
        
        /// <remarks/>
        pin,
        
        /// <remarks/>
        nopin,
        
        /// <remarks/>
        directmarket,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class customBilling : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string phoneField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cityField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string urlField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string descriptorField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string phone {
            get {
                return this.phoneField;
            }
            set {
                if ((this.phoneField != null)) {
                    if ((phoneField.Equals(value) != true)) {
                        this.phoneField = value;
                        this.OnPropertyChanged("phone");
                    }
                }
                else {
                    this.phoneField = value;
                    this.OnPropertyChanged("phone");
                }
            }
        }
        
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((this.cityField != null)) {
                    if ((cityField.Equals(value) != true)) {
                        this.cityField = value;
                        this.OnPropertyChanged("city");
                    }
                }
                else {
                    this.cityField = value;
                    this.OnPropertyChanged("city");
                }
            }
        }
        
        public string url {
            get {
                return this.urlField;
            }
            set {
                if ((this.urlField != null)) {
                    if ((urlField.Equals(value) != true)) {
                        this.urlField = value;
                        this.OnPropertyChanged("url");
                    }
                }
                else {
                    this.urlField = value;
                    this.OnPropertyChanged("url");
                }
            }
        }
        
        public string descriptor {
            get {
                return this.descriptorField;
            }
            set {
                if ((this.descriptorField != null)) {
                    if ((descriptorField.Equals(value) != true)) {
                        this.descriptorField = value;
                        this.OnPropertyChanged("descriptor");
                    }
                }
                else {
                    this.descriptorField = value;
                    this.OnPropertyChanged("descriptor");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(customBilling));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current customBilling object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an customBilling object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output customBilling object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out customBilling obj, out System.Exception exception) {
            exception = null;
            obj = default(customBilling);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out customBilling obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static customBilling Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((customBilling)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current customBilling object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an customBilling object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output customBilling object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out customBilling obj, out System.Exception exception) {
            exception = null;
            obj = default(customBilling);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out customBilling obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static customBilling LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this customBilling object
        /// </summary>
        public virtual customBilling Clone() {
            return ((customBilling)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum govtTaxTypeEnum {
        
        /// <remarks/>
        payment,
        
        /// <remarks/>
        fee,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class enhancedData : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string customerReferenceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long salesTaxField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool salesTaxFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedDataDeliveryType deliveryTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxExemptField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxExemptFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long discountAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool discountAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long shippingAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool shippingAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long dutyAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool dutyAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string shipFromPostalCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string destinationPostalCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private countryTypeEnum destinationCountryCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool destinationCountryCodeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string invoiceReferenceNumberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime orderDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool orderDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ObservableCollection<detailTax> detailTaxField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ObservableCollection<lineItemData> lineItemDataField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public enhancedData() {
            this.lineItemDataField = new ObservableCollection<lineItemData>();
            this.detailTaxField = new ObservableCollection<detailTax>();
            this.deliveryTypeField = enhancedDataDeliveryType.TBD;
        }
        
        public string customerReference {
            get {
                return this.customerReferenceField;
            }
            set {
                if ((this.customerReferenceField != null)) {
                    if ((customerReferenceField.Equals(value) != true)) {
                        this.customerReferenceField = value;
                        this.OnPropertyChanged("customerReference");
                    }
                }
                else {
                    this.customerReferenceField = value;
                    this.OnPropertyChanged("customerReference");
                }
            }
        }
        
        public long salesTax {
            get {
                return this.salesTaxField;
            }
            set {
                if ((salesTaxField.Equals(value) != true)) {
                    this.salesTaxField = value;
                    this.OnPropertyChanged("salesTax");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool salesTaxSpecified {
            get {
                return this.salesTaxFieldSpecified;
            }
            set {
                if ((salesTaxFieldSpecified.Equals(value) != true)) {
                    this.salesTaxFieldSpecified = value;
                    this.OnPropertyChanged("salesTaxSpecified");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(enhancedDataDeliveryType.TBD)]
        public enhancedDataDeliveryType deliveryType {
            get {
                return this.deliveryTypeField;
            }
            set {
                if ((deliveryTypeField.Equals(value) != true)) {
                    this.deliveryTypeField = value;
                    this.OnPropertyChanged("deliveryType");
                }
            }
        }
        
        public bool taxExempt {
            get {
                return this.taxExemptField;
            }
            set {
                if ((taxExemptField.Equals(value) != true)) {
                    this.taxExemptField = value;
                    this.OnPropertyChanged("taxExempt");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxExemptSpecified {
            get {
                return this.taxExemptFieldSpecified;
            }
            set {
                if ((taxExemptFieldSpecified.Equals(value) != true)) {
                    this.taxExemptFieldSpecified = value;
                    this.OnPropertyChanged("taxExemptSpecified");
                }
            }
        }
        
        public long discountAmount {
            get {
                return this.discountAmountField;
            }
            set {
                if ((discountAmountField.Equals(value) != true)) {
                    this.discountAmountField = value;
                    this.OnPropertyChanged("discountAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool discountAmountSpecified {
            get {
                return this.discountAmountFieldSpecified;
            }
            set {
                if ((discountAmountFieldSpecified.Equals(value) != true)) {
                    this.discountAmountFieldSpecified = value;
                    this.OnPropertyChanged("discountAmountSpecified");
                }
            }
        }
        
        public long shippingAmount {
            get {
                return this.shippingAmountField;
            }
            set {
                if ((shippingAmountField.Equals(value) != true)) {
                    this.shippingAmountField = value;
                    this.OnPropertyChanged("shippingAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shippingAmountSpecified {
            get {
                return this.shippingAmountFieldSpecified;
            }
            set {
                if ((shippingAmountFieldSpecified.Equals(value) != true)) {
                    this.shippingAmountFieldSpecified = value;
                    this.OnPropertyChanged("shippingAmountSpecified");
                }
            }
        }
        
        public long dutyAmount {
            get {
                return this.dutyAmountField;
            }
            set {
                if ((dutyAmountField.Equals(value) != true)) {
                    this.dutyAmountField = value;
                    this.OnPropertyChanged("dutyAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dutyAmountSpecified {
            get {
                return this.dutyAmountFieldSpecified;
            }
            set {
                if ((dutyAmountFieldSpecified.Equals(value) != true)) {
                    this.dutyAmountFieldSpecified = value;
                    this.OnPropertyChanged("dutyAmountSpecified");
                }
            }
        }
        
        public string shipFromPostalCode {
            get {
                return this.shipFromPostalCodeField;
            }
            set {
                if ((this.shipFromPostalCodeField != null)) {
                    if ((shipFromPostalCodeField.Equals(value) != true)) {
                        this.shipFromPostalCodeField = value;
                        this.OnPropertyChanged("shipFromPostalCode");
                    }
                }
                else {
                    this.shipFromPostalCodeField = value;
                    this.OnPropertyChanged("shipFromPostalCode");
                }
            }
        }
        
        public string destinationPostalCode {
            get {
                return this.destinationPostalCodeField;
            }
            set {
                if ((this.destinationPostalCodeField != null)) {
                    if ((destinationPostalCodeField.Equals(value) != true)) {
                        this.destinationPostalCodeField = value;
                        this.OnPropertyChanged("destinationPostalCode");
                    }
                }
                else {
                    this.destinationPostalCodeField = value;
                    this.OnPropertyChanged("destinationPostalCode");
                }
            }
        }
        
        public countryTypeEnum destinationCountryCode {
            get {
                return this.destinationCountryCodeField;
            }
            set {
                if ((destinationCountryCodeField.Equals(value) != true)) {
                    this.destinationCountryCodeField = value;
                    this.OnPropertyChanged("destinationCountryCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool destinationCountryCodeSpecified {
            get {
                return this.destinationCountryCodeFieldSpecified;
            }
            set {
                if ((destinationCountryCodeFieldSpecified.Equals(value) != true)) {
                    this.destinationCountryCodeFieldSpecified = value;
                    this.OnPropertyChanged("destinationCountryCodeSpecified");
                }
            }
        }
        
        public string invoiceReferenceNumber {
            get {
                return this.invoiceReferenceNumberField;
            }
            set {
                if ((this.invoiceReferenceNumberField != null)) {
                    if ((invoiceReferenceNumberField.Equals(value) != true)) {
                        this.invoiceReferenceNumberField = value;
                        this.OnPropertyChanged("invoiceReferenceNumber");
                    }
                }
                else {
                    this.invoiceReferenceNumberField = value;
                    this.OnPropertyChanged("invoiceReferenceNumber");
                }
            }
        }
        
        public System.DateTime orderDate {
            get {
                return this.orderDateField;
            }
            set {
                if ((orderDateField.Equals(value) != true)) {
                    this.orderDateField = value;
                    this.OnPropertyChanged("orderDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool orderDateSpecified {
            get {
                return this.orderDateFieldSpecified;
            }
            set {
                if ((orderDateFieldSpecified.Equals(value) != true)) {
                    this.orderDateFieldSpecified = value;
                    this.OnPropertyChanged("orderDateSpecified");
                }
            }
        }
        
        public ObservableCollection<detailTax> detailTax {
            get {
                return this.detailTaxField;
            }
            set {
                if ((this.detailTaxField != null)) {
                    if ((detailTaxField.Equals(value) != true)) {
                        this.detailTaxField = value;
                        this.OnPropertyChanged("detailTax");
                    }
                }
                else {
                    this.detailTaxField = value;
                    this.OnPropertyChanged("detailTax");
                }
            }
        }
        
        public ObservableCollection<lineItemData> lineItemData {
            get {
                return this.lineItemDataField;
            }
            set {
                if ((this.lineItemDataField != null)) {
                    if ((lineItemDataField.Equals(value) != true)) {
                        this.lineItemDataField = value;
                        this.OnPropertyChanged("lineItemData");
                    }
                }
                else {
                    this.lineItemDataField = value;
                    this.OnPropertyChanged("lineItemData");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(enhancedData));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current enhancedData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an enhancedData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output enhancedData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out enhancedData obj, out System.Exception exception) {
            exception = null;
            obj = default(enhancedData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out enhancedData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static enhancedData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((enhancedData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current enhancedData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an enhancedData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output enhancedData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out enhancedData obj, out System.Exception exception) {
            exception = null;
            obj = default(enhancedData);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out enhancedData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static enhancedData LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this enhancedData object
        /// </summary>
        public virtual enhancedData Clone() {
            return ((enhancedData)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum enhancedDataDeliveryType {
        
        /// <remarks/>
        CNC,
        
        /// <remarks/>
        DIG,
        
        /// <remarks/>
        PHY,
        
        /// <remarks/>
        SVC,
        
        /// <remarks/>
        TBD,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class detailTax : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxIncludedInTotalField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxIncludedInTotalFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long taxAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private decimal taxRateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxRateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private taxTypeIdentifierEnum taxTypeIdentifierField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxTypeIdentifierFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cardAcceptorTaxIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public bool taxIncludedInTotal {
            get {
                return this.taxIncludedInTotalField;
            }
            set {
                if ((taxIncludedInTotalField.Equals(value) != true)) {
                    this.taxIncludedInTotalField = value;
                    this.OnPropertyChanged("taxIncludedInTotal");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxIncludedInTotalSpecified {
            get {
                return this.taxIncludedInTotalFieldSpecified;
            }
            set {
                if ((taxIncludedInTotalFieldSpecified.Equals(value) != true)) {
                    this.taxIncludedInTotalFieldSpecified = value;
                    this.OnPropertyChanged("taxIncludedInTotalSpecified");
                }
            }
        }
        
        public long taxAmount {
            get {
                return this.taxAmountField;
            }
            set {
                if ((taxAmountField.Equals(value) != true)) {
                    this.taxAmountField = value;
                    this.OnPropertyChanged("taxAmount");
                }
            }
        }
        
        public decimal taxRate {
            get {
                return this.taxRateField;
            }
            set {
                if ((this.taxRateField != null)) {
                    if ((taxRateField.Equals(value) != true)) {
                        this.taxRateField = value;
                        this.OnPropertyChanged("taxRate");
                    }
                }
                else {
                    this.taxRateField = value;
                    this.OnPropertyChanged("taxRate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxRateSpecified {
            get {
                return this.taxRateFieldSpecified;
            }
            set {
                if ((taxRateFieldSpecified.Equals(value) != true)) {
                    this.taxRateFieldSpecified = value;
                    this.OnPropertyChanged("taxRateSpecified");
                }
            }
        }
        
        public taxTypeIdentifierEnum taxTypeIdentifier {
            get {
                return this.taxTypeIdentifierField;
            }
            set {
                if ((taxTypeIdentifierField.Equals(value) != true)) {
                    this.taxTypeIdentifierField = value;
                    this.OnPropertyChanged("taxTypeIdentifier");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxTypeIdentifierSpecified {
            get {
                return this.taxTypeIdentifierFieldSpecified;
            }
            set {
                if ((taxTypeIdentifierFieldSpecified.Equals(value) != true)) {
                    this.taxTypeIdentifierFieldSpecified = value;
                    this.OnPropertyChanged("taxTypeIdentifierSpecified");
                }
            }
        }
        
        public string cardAcceptorTaxId {
            get {
                return this.cardAcceptorTaxIdField;
            }
            set {
                if ((this.cardAcceptorTaxIdField != null)) {
                    if ((cardAcceptorTaxIdField.Equals(value) != true)) {
                        this.cardAcceptorTaxIdField = value;
                        this.OnPropertyChanged("cardAcceptorTaxId");
                    }
                }
                else {
                    this.cardAcceptorTaxIdField = value;
                    this.OnPropertyChanged("cardAcceptorTaxId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(detailTax));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current detailTax object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an detailTax object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output detailTax object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out detailTax obj, out System.Exception exception) {
            exception = null;
            obj = default(detailTax);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out detailTax obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static detailTax Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((detailTax)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current detailTax object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an detailTax object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output detailTax object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out detailTax obj, out System.Exception exception) {
            exception = null;
            obj = default(detailTax);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out detailTax obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static detailTax LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this detailTax object
        /// </summary>
        public virtual detailTax Clone() {
            return ((detailTax)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum taxTypeIdentifierEnum {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("00")]
        Item00,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        Item22,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class lineItemData : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long itemSequenceNumberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool itemSequenceNumberFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemDescriptionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string productCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private decimal quantityField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool quantityFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string unitOfMeasureField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long taxAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long lineItemTotalField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool lineItemTotalFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long lineItemTotalWithTaxField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool lineItemTotalWithTaxFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long itemDiscountAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool itemDiscountAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string commodityCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private decimal unitCostField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool unitCostFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ObservableCollection<detailTax> detailTaxField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public lineItemData() {
            this.detailTaxField = new ObservableCollection<detailTax>();
        }
        
        public long itemSequenceNumber {
            get {
                return this.itemSequenceNumberField;
            }
            set {
                if ((itemSequenceNumberField.Equals(value) != true)) {
                    this.itemSequenceNumberField = value;
                    this.OnPropertyChanged("itemSequenceNumber");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool itemSequenceNumberSpecified {
            get {
                return this.itemSequenceNumberFieldSpecified;
            }
            set {
                if ((itemSequenceNumberFieldSpecified.Equals(value) != true)) {
                    this.itemSequenceNumberFieldSpecified = value;
                    this.OnPropertyChanged("itemSequenceNumberSpecified");
                }
            }
        }
        
        public string itemDescription {
            get {
                return this.itemDescriptionField;
            }
            set {
                if ((this.itemDescriptionField != null)) {
                    if ((itemDescriptionField.Equals(value) != true)) {
                        this.itemDescriptionField = value;
                        this.OnPropertyChanged("itemDescription");
                    }
                }
                else {
                    this.itemDescriptionField = value;
                    this.OnPropertyChanged("itemDescription");
                }
            }
        }
        
        public string productCode {
            get {
                return this.productCodeField;
            }
            set {
                if ((this.productCodeField != null)) {
                    if ((productCodeField.Equals(value) != true)) {
                        this.productCodeField = value;
                        this.OnPropertyChanged("productCode");
                    }
                }
                else {
                    this.productCodeField = value;
                    this.OnPropertyChanged("productCode");
                }
            }
        }
        
        public decimal quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField != null)) {
                    if ((quantityField.Equals(value) != true)) {
                        this.quantityField = value;
                        this.OnPropertyChanged("quantity");
                    }
                }
                else {
                    this.quantityField = value;
                    this.OnPropertyChanged("quantity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quantitySpecified {
            get {
                return this.quantityFieldSpecified;
            }
            set {
                if ((quantityFieldSpecified.Equals(value) != true)) {
                    this.quantityFieldSpecified = value;
                    this.OnPropertyChanged("quantitySpecified");
                }
            }
        }
        
        public string unitOfMeasure {
            get {
                return this.unitOfMeasureField;
            }
            set {
                if ((this.unitOfMeasureField != null)) {
                    if ((unitOfMeasureField.Equals(value) != true)) {
                        this.unitOfMeasureField = value;
                        this.OnPropertyChanged("unitOfMeasure");
                    }
                }
                else {
                    this.unitOfMeasureField = value;
                    this.OnPropertyChanged("unitOfMeasure");
                }
            }
        }
        
        public long taxAmount {
            get {
                return this.taxAmountField;
            }
            set {
                if ((taxAmountField.Equals(value) != true)) {
                    this.taxAmountField = value;
                    this.OnPropertyChanged("taxAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxAmountSpecified {
            get {
                return this.taxAmountFieldSpecified;
            }
            set {
                if ((taxAmountFieldSpecified.Equals(value) != true)) {
                    this.taxAmountFieldSpecified = value;
                    this.OnPropertyChanged("taxAmountSpecified");
                }
            }
        }
        
        public long lineItemTotal {
            get {
                return this.lineItemTotalField;
            }
            set {
                if ((lineItemTotalField.Equals(value) != true)) {
                    this.lineItemTotalField = value;
                    this.OnPropertyChanged("lineItemTotal");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lineItemTotalSpecified {
            get {
                return this.lineItemTotalFieldSpecified;
            }
            set {
                if ((lineItemTotalFieldSpecified.Equals(value) != true)) {
                    this.lineItemTotalFieldSpecified = value;
                    this.OnPropertyChanged("lineItemTotalSpecified");
                }
            }
        }
        
        public long lineItemTotalWithTax {
            get {
                return this.lineItemTotalWithTaxField;
            }
            set {
                if ((lineItemTotalWithTaxField.Equals(value) != true)) {
                    this.lineItemTotalWithTaxField = value;
                    this.OnPropertyChanged("lineItemTotalWithTax");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lineItemTotalWithTaxSpecified {
            get {
                return this.lineItemTotalWithTaxFieldSpecified;
            }
            set {
                if ((lineItemTotalWithTaxFieldSpecified.Equals(value) != true)) {
                    this.lineItemTotalWithTaxFieldSpecified = value;
                    this.OnPropertyChanged("lineItemTotalWithTaxSpecified");
                }
            }
        }
        
        public long itemDiscountAmount {
            get {
                return this.itemDiscountAmountField;
            }
            set {
                if ((itemDiscountAmountField.Equals(value) != true)) {
                    this.itemDiscountAmountField = value;
                    this.OnPropertyChanged("itemDiscountAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool itemDiscountAmountSpecified {
            get {
                return this.itemDiscountAmountFieldSpecified;
            }
            set {
                if ((itemDiscountAmountFieldSpecified.Equals(value) != true)) {
                    this.itemDiscountAmountFieldSpecified = value;
                    this.OnPropertyChanged("itemDiscountAmountSpecified");
                }
            }
        }
        
        public string commodityCode {
            get {
                return this.commodityCodeField;
            }
            set {
                if ((this.commodityCodeField != null)) {
                    if ((commodityCodeField.Equals(value) != true)) {
                        this.commodityCodeField = value;
                        this.OnPropertyChanged("commodityCode");
                    }
                }
                else {
                    this.commodityCodeField = value;
                    this.OnPropertyChanged("commodityCode");
                }
            }
        }
        
        public decimal unitCost {
            get {
                return this.unitCostField;
            }
            set {
                if ((this.unitCostField != null)) {
                    if ((unitCostField.Equals(value) != true)) {
                        this.unitCostField = value;
                        this.OnPropertyChanged("unitCost");
                    }
                }
                else {
                    this.unitCostField = value;
                    this.OnPropertyChanged("unitCost");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitCostSpecified {
            get {
                return this.unitCostFieldSpecified;
            }
            set {
                if ((unitCostFieldSpecified.Equals(value) != true)) {
                    this.unitCostFieldSpecified = value;
                    this.OnPropertyChanged("unitCostSpecified");
                }
            }
        }
        
        public ObservableCollection<detailTax> detailTax {
            get {
                return this.detailTaxField;
            }
            set {
                if ((this.detailTaxField != null)) {
                    if ((detailTaxField.Equals(value) != true)) {
                        this.detailTaxField = value;
                        this.OnPropertyChanged("detailTax");
                    }
                }
                else {
                    this.detailTaxField = value;
                    this.OnPropertyChanged("detailTax");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(lineItemData));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current lineItemData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an lineItemData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output lineItemData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out lineItemData obj, out System.Exception exception) {
            exception = null;
            obj = default(lineItemData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out lineItemData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static lineItemData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((lineItemData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current lineItemData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an lineItemData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output lineItemData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out lineItemData obj, out System.Exception exception) {
            exception = null;
            obj = default(lineItemData);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out lineItemData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static lineItemData LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this lineItemData object
        /// </summary>
        public virtual lineItemData Clone() {
            return ((lineItemData)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class amexAggregatorData : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sellerIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sellerMerchantCategoryCodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string sellerId {
            get {
                return this.sellerIdField;
            }
            set {
                if ((this.sellerIdField != null)) {
                    if ((sellerIdField.Equals(value) != true)) {
                        this.sellerIdField = value;
                        this.OnPropertyChanged("sellerId");
                    }
                }
                else {
                    this.sellerIdField = value;
                    this.OnPropertyChanged("sellerId");
                }
            }
        }
        
        public string sellerMerchantCategoryCode {
            get {
                return this.sellerMerchantCategoryCodeField;
            }
            set {
                if ((this.sellerMerchantCategoryCodeField != null)) {
                    if ((sellerMerchantCategoryCodeField.Equals(value) != true)) {
                        this.sellerMerchantCategoryCodeField = value;
                        this.OnPropertyChanged("sellerMerchantCategoryCode");
                    }
                }
                else {
                    this.sellerMerchantCategoryCodeField = value;
                    this.OnPropertyChanged("sellerMerchantCategoryCode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(amexAggregatorData));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current amexAggregatorData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an amexAggregatorData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output amexAggregatorData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out amexAggregatorData obj, out System.Exception exception) {
            exception = null;
            obj = default(amexAggregatorData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out amexAggregatorData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static amexAggregatorData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((amexAggregatorData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current amexAggregatorData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an amexAggregatorData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output amexAggregatorData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out amexAggregatorData obj, out System.Exception exception) {
            exception = null;
            obj = default(amexAggregatorData);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out amexAggregatorData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static amexAggregatorData LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this amexAggregatorData object
        /// </summary>
        public virtual amexAggregatorData Clone() {
            return ((amexAggregatorData)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class healthcareIIAS : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private healthcareAmounts healthcareAmountsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private IIASFlagType iIASFlagField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public healthcareIIAS() {
            this.healthcareAmountsField = new healthcareAmounts();
        }
        
        public healthcareAmounts healthcareAmounts {
            get {
                return this.healthcareAmountsField;
            }
            set {
                if ((this.healthcareAmountsField != null)) {
                    if ((healthcareAmountsField.Equals(value) != true)) {
                        this.healthcareAmountsField = value;
                        this.OnPropertyChanged("healthcareAmounts");
                    }
                }
                else {
                    this.healthcareAmountsField = value;
                    this.OnPropertyChanged("healthcareAmounts");
                }
            }
        }
        
        public IIASFlagType IIASFlag {
            get {
                return this.iIASFlagField;
            }
            set {
                if ((iIASFlagField.Equals(value) != true)) {
                    this.iIASFlagField = value;
                    this.OnPropertyChanged("IIASFlag");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(healthcareIIAS));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current healthcareIIAS object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an healthcareIIAS object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output healthcareIIAS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out healthcareIIAS obj, out System.Exception exception) {
            exception = null;
            obj = default(healthcareIIAS);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out healthcareIIAS obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static healthcareIIAS Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((healthcareIIAS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current healthcareIIAS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an healthcareIIAS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output healthcareIIAS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out healthcareIIAS obj, out System.Exception exception) {
            exception = null;
            obj = default(healthcareIIAS);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out healthcareIIAS obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static healthcareIIAS LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this healthcareIIAS object
        /// </summary>
        public virtual healthcareIIAS Clone() {
            return ((healthcareIIAS)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class healthcareAmounts : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long totalHealthcareAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long rxAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool rxAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long visionAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool visionAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long clinicOtherAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool clinicOtherAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long dentalAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool dentalAmountFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long totalHealthcareAmount {
            get {
                return this.totalHealthcareAmountField;
            }
            set {
                if ((totalHealthcareAmountField.Equals(value) != true)) {
                    this.totalHealthcareAmountField = value;
                    this.OnPropertyChanged("totalHealthcareAmount");
                }
            }
        }
        
        public long RxAmount {
            get {
                return this.rxAmountField;
            }
            set {
                if ((rxAmountField.Equals(value) != true)) {
                    this.rxAmountField = value;
                    this.OnPropertyChanged("RxAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RxAmountSpecified {
            get {
                return this.rxAmountFieldSpecified;
            }
            set {
                if ((rxAmountFieldSpecified.Equals(value) != true)) {
                    this.rxAmountFieldSpecified = value;
                    this.OnPropertyChanged("RxAmountSpecified");
                }
            }
        }
        
        public long visionAmount {
            get {
                return this.visionAmountField;
            }
            set {
                if ((visionAmountField.Equals(value) != true)) {
                    this.visionAmountField = value;
                    this.OnPropertyChanged("visionAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool visionAmountSpecified {
            get {
                return this.visionAmountFieldSpecified;
            }
            set {
                if ((visionAmountFieldSpecified.Equals(value) != true)) {
                    this.visionAmountFieldSpecified = value;
                    this.OnPropertyChanged("visionAmountSpecified");
                }
            }
        }
        
        public long clinicOtherAmount {
            get {
                return this.clinicOtherAmountField;
            }
            set {
                if ((clinicOtherAmountField.Equals(value) != true)) {
                    this.clinicOtherAmountField = value;
                    this.OnPropertyChanged("clinicOtherAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool clinicOtherAmountSpecified {
            get {
                return this.clinicOtherAmountFieldSpecified;
            }
            set {
                if ((clinicOtherAmountFieldSpecified.Equals(value) != true)) {
                    this.clinicOtherAmountFieldSpecified = value;
                    this.OnPropertyChanged("clinicOtherAmountSpecified");
                }
            }
        }
        
        public long dentalAmount {
            get {
                return this.dentalAmountField;
            }
            set {
                if ((dentalAmountField.Equals(value) != true)) {
                    this.dentalAmountField = value;
                    this.OnPropertyChanged("dentalAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dentalAmountSpecified {
            get {
                return this.dentalAmountFieldSpecified;
            }
            set {
                if ((dentalAmountFieldSpecified.Equals(value) != true)) {
                    this.dentalAmountFieldSpecified = value;
                    this.OnPropertyChanged("dentalAmountSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(healthcareAmounts));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current healthcareAmounts object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an healthcareAmounts object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output healthcareAmounts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out healthcareAmounts obj, out System.Exception exception) {
            exception = null;
            obj = default(healthcareAmounts);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out healthcareAmounts obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static healthcareAmounts Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((healthcareAmounts)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current healthcareAmounts object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an healthcareAmounts object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output healthcareAmounts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out healthcareAmounts obj, out System.Exception exception) {
            exception = null;
            obj = default(healthcareAmounts);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out healthcareAmounts obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static healthcareAmounts LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this healthcareAmounts object
        /// </summary>
        public virtual healthcareAmounts Clone() {
            return ((healthcareAmounts)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum IIASFlagType {
        
        /// <remarks/>
        Y,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class filteringType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool prepaidField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool prepaidFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool internationalField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool internationalFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool chargebackField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool chargebackFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public bool prepaid {
            get {
                return this.prepaidField;
            }
            set {
                if ((prepaidField.Equals(value) != true)) {
                    this.prepaidField = value;
                    this.OnPropertyChanged("prepaid");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool prepaidSpecified {
            get {
                return this.prepaidFieldSpecified;
            }
            set {
                if ((prepaidFieldSpecified.Equals(value) != true)) {
                    this.prepaidFieldSpecified = value;
                    this.OnPropertyChanged("prepaidSpecified");
                }
            }
        }
        
        public bool international {
            get {
                return this.internationalField;
            }
            set {
                if ((internationalField.Equals(value) != true)) {
                    this.internationalField = value;
                    this.OnPropertyChanged("international");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool internationalSpecified {
            get {
                return this.internationalFieldSpecified;
            }
            set {
                if ((internationalFieldSpecified.Equals(value) != true)) {
                    this.internationalFieldSpecified = value;
                    this.OnPropertyChanged("internationalSpecified");
                }
            }
        }
        
        public bool chargeback {
            get {
                return this.chargebackField;
            }
            set {
                if ((chargebackField.Equals(value) != true)) {
                    this.chargebackField = value;
                    this.OnPropertyChanged("chargeback");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool chargebackSpecified {
            get {
                return this.chargebackFieldSpecified;
            }
            set {
                if ((chargebackFieldSpecified.Equals(value) != true)) {
                    this.chargebackFieldSpecified = value;
                    this.OnPropertyChanged("chargebackSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(filteringType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current filteringType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an filteringType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output filteringType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out filteringType obj, out System.Exception exception) {
            exception = null;
            obj = default(filteringType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out filteringType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static filteringType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((filteringType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current filteringType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an filteringType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output filteringType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out filteringType obj, out System.Exception exception) {
            exception = null;
            obj = default(filteringType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out filteringType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static filteringType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this filteringType object
        /// </summary>
        public virtual filteringType Clone() {
            return ((filteringType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class merchantDataType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string campaignField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string affiliateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string merchantGroupingIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string campaign {
            get {
                return this.campaignField;
            }
            set {
                if ((this.campaignField != null)) {
                    if ((campaignField.Equals(value) != true)) {
                        this.campaignField = value;
                        this.OnPropertyChanged("campaign");
                    }
                }
                else {
                    this.campaignField = value;
                    this.OnPropertyChanged("campaign");
                }
            }
        }
        
        public string affiliate {
            get {
                return this.affiliateField;
            }
            set {
                if ((this.affiliateField != null)) {
                    if ((affiliateField.Equals(value) != true)) {
                        this.affiliateField = value;
                        this.OnPropertyChanged("affiliate");
                    }
                }
                else {
                    this.affiliateField = value;
                    this.OnPropertyChanged("affiliate");
                }
            }
        }
        
        public string merchantGroupingId {
            get {
                return this.merchantGroupingIdField;
            }
            set {
                if ((this.merchantGroupingIdField != null)) {
                    if ((merchantGroupingIdField.Equals(value) != true)) {
                        this.merchantGroupingIdField = value;
                        this.OnPropertyChanged("merchantGroupingId");
                    }
                }
                else {
                    this.merchantGroupingIdField = value;
                    this.OnPropertyChanged("merchantGroupingId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(merchantDataType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current merchantDataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an merchantDataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output merchantDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out merchantDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(merchantDataType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out merchantDataType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static merchantDataType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((merchantDataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current merchantDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an merchantDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output merchantDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out merchantDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(merchantDataType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out merchantDataType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static merchantDataType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this merchantDataType object
        /// </summary>
        public virtual merchantDataType Clone() {
            return ((merchantDataType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class recyclingRequestType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private recycleByTypeEnum recycleByField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool recycleByFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string recycleIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public recycleByTypeEnum recycleBy {
            get {
                return this.recycleByField;
            }
            set {
                if ((recycleByField.Equals(value) != true)) {
                    this.recycleByField = value;
                    this.OnPropertyChanged("recycleBy");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool recycleBySpecified {
            get {
                return this.recycleByFieldSpecified;
            }
            set {
                if ((recycleByFieldSpecified.Equals(value) != true)) {
                    this.recycleByFieldSpecified = value;
                    this.OnPropertyChanged("recycleBySpecified");
                }
            }
        }
        
        public string recycleId {
            get {
                return this.recycleIdField;
            }
            set {
                if ((this.recycleIdField != null)) {
                    if ((recycleIdField.Equals(value) != true)) {
                        this.recycleIdField = value;
                        this.OnPropertyChanged("recycleId");
                    }
                }
                else {
                    this.recycleIdField = value;
                    this.OnPropertyChanged("recycleId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(recyclingRequestType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current recyclingRequestType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an recyclingRequestType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output recyclingRequestType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out recyclingRequestType obj, out System.Exception exception) {
            exception = null;
            obj = default(recyclingRequestType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out recyclingRequestType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static recyclingRequestType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((recyclingRequestType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current recyclingRequestType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an recyclingRequestType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output recyclingRequestType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out recyclingRequestType obj, out System.Exception exception) {
            exception = null;
            obj = default(recyclingRequestType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out recyclingRequestType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static recyclingRequestType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this recyclingRequestType object
        /// </summary>
        public virtual recyclingRequestType Clone() {
            return ((recyclingRequestType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum recycleByTypeEnum {
        
        /// <remarks/>
        Merchant,
        
        /// <remarks/>
        Litle,
        
        /// <remarks/>
        None,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class authReversal : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool amountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string payPalNotesField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string actionReasonField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool amountSpecified {
            get {
                return this.amountFieldSpecified;
            }
            set {
                if ((amountFieldSpecified.Equals(value) != true)) {
                    this.amountFieldSpecified = value;
                    this.OnPropertyChanged("amountSpecified");
                }
            }
        }
        
        public string payPalNotes {
            get {
                return this.payPalNotesField;
            }
            set {
                if ((this.payPalNotesField != null)) {
                    if ((payPalNotesField.Equals(value) != true)) {
                        this.payPalNotesField = value;
                        this.OnPropertyChanged("payPalNotes");
                    }
                }
                else {
                    this.payPalNotesField = value;
                    this.OnPropertyChanged("payPalNotes");
                }
            }
        }
        
        public string actionReason {
            get {
                return this.actionReasonField;
            }
            set {
                if ((this.actionReasonField != null)) {
                    if ((actionReasonField.Equals(value) != true)) {
                        this.actionReasonField = value;
                        this.OnPropertyChanged("actionReason");
                    }
                }
                else {
                    this.actionReasonField = value;
                    this.OnPropertyChanged("actionReason");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(authReversal));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current authReversal object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an authReversal object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output authReversal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out authReversal obj, out System.Exception exception) {
            exception = null;
            obj = default(authReversal);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out authReversal obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static authReversal Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((authReversal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current authReversal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an authReversal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output authReversal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out authReversal obj, out System.Exception exception) {
            exception = null;
            obj = default(authReversal);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out authReversal obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static authReversal LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this authReversal object
        /// </summary>
        public virtual authReversal Clone() {
            return ((authReversal)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class capture : transactionTypeWithReportGroupAndPartial, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool amountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedData enhancedDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructionsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool payPalOrderCompleteField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool payPalOrderCompleteFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string payPalNotesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public capture() {
            this.processingInstructionsField = new processingInstructions();
            this.enhancedDataField = new enhancedData();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool amountSpecified {
            get {
                return this.amountFieldSpecified;
            }
            set {
                if ((amountFieldSpecified.Equals(value) != true)) {
                    this.amountFieldSpecified = value;
                    this.OnPropertyChanged("amountSpecified");
                }
            }
        }
        
        public enhancedData enhancedData {
            get {
                return this.enhancedDataField;
            }
            set {
                if ((this.enhancedDataField != null)) {
                    if ((enhancedDataField.Equals(value) != true)) {
                        this.enhancedDataField = value;
                        this.OnPropertyChanged("enhancedData");
                    }
                }
                else {
                    this.enhancedDataField = value;
                    this.OnPropertyChanged("enhancedData");
                }
            }
        }
        
        public processingInstructions processingInstructions {
            get {
                return this.processingInstructionsField;
            }
            set {
                if ((this.processingInstructionsField != null)) {
                    if ((processingInstructionsField.Equals(value) != true)) {
                        this.processingInstructionsField = value;
                        this.OnPropertyChanged("processingInstructions");
                    }
                }
                else {
                    this.processingInstructionsField = value;
                    this.OnPropertyChanged("processingInstructions");
                }
            }
        }
        
        public bool payPalOrderComplete {
            get {
                return this.payPalOrderCompleteField;
            }
            set {
                if ((payPalOrderCompleteField.Equals(value) != true)) {
                    this.payPalOrderCompleteField = value;
                    this.OnPropertyChanged("payPalOrderComplete");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool payPalOrderCompleteSpecified {
            get {
                return this.payPalOrderCompleteFieldSpecified;
            }
            set {
                if ((payPalOrderCompleteFieldSpecified.Equals(value) != true)) {
                    this.payPalOrderCompleteFieldSpecified = value;
                    this.OnPropertyChanged("payPalOrderCompleteSpecified");
                }
            }
        }
        
        public string payPalNotes {
            get {
                return this.payPalNotesField;
            }
            set {
                if ((this.payPalNotesField != null)) {
                    if ((payPalNotesField.Equals(value) != true)) {
                        this.payPalNotesField = value;
                        this.OnPropertyChanged("payPalNotes");
                    }
                }
                else {
                    this.payPalNotesField = value;
                    this.OnPropertyChanged("payPalNotes");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(capture));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current capture object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an capture object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output capture object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out capture obj, out System.Exception exception) {
            exception = null;
            obj = default(capture);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out capture obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static capture Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((capture)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current capture object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an capture object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output capture object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out capture obj, out System.Exception exception) {
            exception = null;
            obj = default(capture);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out capture obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static capture LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this capture object
        /// </summary>
        public virtual capture Clone() {
            return ((capture)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class forceCapture : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardType cardField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardTokenType tokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardPaypageType paypageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBillingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private govtTaxTypeEnum taxTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxTypeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedData enhancedDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructionsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private pos posField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private amexAggregatorData amexAggregatorDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private merchantDataType merchantDataField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public forceCapture() {
            this.merchantDataField = new merchantDataType();
            this.amexAggregatorDataField = new amexAggregatorData();
            this.posField = new pos();
            this.processingInstructionsField = new processingInstructions();
            this.enhancedDataField = new enhancedData();
            this.customBillingField = new customBilling();
            this.paypageField = new cardPaypageType();
            this.tokenField = new cardTokenType();
            this.cardField = new cardType();
            this.billToAddressField = new contact();
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public cardType card {
            get {
                return this.cardField;
            }
            set {
                if ((this.cardField != null)) {
                    if ((cardField.Equals(value) != true)) {
                        this.cardField = value;
                        this.OnPropertyChanged("card");
                    }
                }
                else {
                    this.cardField = value;
                    this.OnPropertyChanged("card");
                }
            }
        }
        
        public cardTokenType token {
            get {
                return this.tokenField;
            }
            set {
                if ((this.tokenField != null)) {
                    if ((tokenField.Equals(value) != true)) {
                        this.tokenField = value;
                        this.OnPropertyChanged("token");
                    }
                }
                else {
                    this.tokenField = value;
                    this.OnPropertyChanged("token");
                }
            }
        }
        
        public cardPaypageType paypage {
            get {
                return this.paypageField;
            }
            set {
                if ((this.paypageField != null)) {
                    if ((paypageField.Equals(value) != true)) {
                        this.paypageField = value;
                        this.OnPropertyChanged("paypage");
                    }
                }
                else {
                    this.paypageField = value;
                    this.OnPropertyChanged("paypage");
                }
            }
        }
        
        public customBilling customBilling {
            get {
                return this.customBillingField;
            }
            set {
                if ((this.customBillingField != null)) {
                    if ((customBillingField.Equals(value) != true)) {
                        this.customBillingField = value;
                        this.OnPropertyChanged("customBilling");
                    }
                }
                else {
                    this.customBillingField = value;
                    this.OnPropertyChanged("customBilling");
                }
            }
        }
        
        public govtTaxTypeEnum taxType {
            get {
                return this.taxTypeField;
            }
            set {
                if ((taxTypeField.Equals(value) != true)) {
                    this.taxTypeField = value;
                    this.OnPropertyChanged("taxType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxTypeSpecified {
            get {
                return this.taxTypeFieldSpecified;
            }
            set {
                if ((taxTypeFieldSpecified.Equals(value) != true)) {
                    this.taxTypeFieldSpecified = value;
                    this.OnPropertyChanged("taxTypeSpecified");
                }
            }
        }
        
        public enhancedData enhancedData {
            get {
                return this.enhancedDataField;
            }
            set {
                if ((this.enhancedDataField != null)) {
                    if ((enhancedDataField.Equals(value) != true)) {
                        this.enhancedDataField = value;
                        this.OnPropertyChanged("enhancedData");
                    }
                }
                else {
                    this.enhancedDataField = value;
                    this.OnPropertyChanged("enhancedData");
                }
            }
        }
        
        public processingInstructions processingInstructions {
            get {
                return this.processingInstructionsField;
            }
            set {
                if ((this.processingInstructionsField != null)) {
                    if ((processingInstructionsField.Equals(value) != true)) {
                        this.processingInstructionsField = value;
                        this.OnPropertyChanged("processingInstructions");
                    }
                }
                else {
                    this.processingInstructionsField = value;
                    this.OnPropertyChanged("processingInstructions");
                }
            }
        }
        
        public pos pos {
            get {
                return this.posField;
            }
            set {
                if ((this.posField != null)) {
                    if ((posField.Equals(value) != true)) {
                        this.posField = value;
                        this.OnPropertyChanged("pos");
                    }
                }
                else {
                    this.posField = value;
                    this.OnPropertyChanged("pos");
                }
            }
        }
        
        public amexAggregatorData amexAggregatorData {
            get {
                return this.amexAggregatorDataField;
            }
            set {
                if ((this.amexAggregatorDataField != null)) {
                    if ((amexAggregatorDataField.Equals(value) != true)) {
                        this.amexAggregatorDataField = value;
                        this.OnPropertyChanged("amexAggregatorData");
                    }
                }
                else {
                    this.amexAggregatorDataField = value;
                    this.OnPropertyChanged("amexAggregatorData");
                }
            }
        }
        
        public merchantDataType merchantData {
            get {
                return this.merchantDataField;
            }
            set {
                if ((this.merchantDataField != null)) {
                    if ((merchantDataField.Equals(value) != true)) {
                        this.merchantDataField = value;
                        this.OnPropertyChanged("merchantData");
                    }
                }
                else {
                    this.merchantDataField = value;
                    this.OnPropertyChanged("merchantData");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(forceCapture));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current forceCapture object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an forceCapture object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output forceCapture object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out forceCapture obj, out System.Exception exception) {
            exception = null;
            obj = default(forceCapture);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out forceCapture obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static forceCapture Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((forceCapture)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current forceCapture object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an forceCapture object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output forceCapture object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out forceCapture obj, out System.Exception exception) {
            exception = null;
            obj = default(forceCapture);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out forceCapture obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static forceCapture LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this forceCapture object
        /// </summary>
        public virtual forceCapture Clone() {
            return ((forceCapture)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class captureGivenAuth : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private authInformation authInformationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact shipToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardType cardField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardTokenType tokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardPaypageType paypageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBillingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private govtTaxTypeEnum taxTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxTypeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private billMeLaterRequest billMeLaterRequestField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedData enhancedDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructionsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private pos posField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private amexAggregatorData amexAggregatorDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private merchantDataType merchantDataField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public captureGivenAuth() {
            this.merchantDataField = new merchantDataType();
            this.amexAggregatorDataField = new amexAggregatorData();
            this.posField = new pos();
            this.processingInstructionsField = new processingInstructions();
            this.enhancedDataField = new enhancedData();
            this.billMeLaterRequestField = new billMeLaterRequest();
            this.customBillingField = new customBilling();
            this.paypageField = new cardPaypageType();
            this.tokenField = new cardTokenType();
            this.cardField = new cardType();
            this.shipToAddressField = new contact();
            this.billToAddressField = new contact();
            this.authInformationField = new authInformation();
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public authInformation authInformation {
            get {
                return this.authInformationField;
            }
            set {
                if ((this.authInformationField != null)) {
                    if ((authInformationField.Equals(value) != true)) {
                        this.authInformationField = value;
                        this.OnPropertyChanged("authInformation");
                    }
                }
                else {
                    this.authInformationField = value;
                    this.OnPropertyChanged("authInformation");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public contact shipToAddress {
            get {
                return this.shipToAddressField;
            }
            set {
                if ((this.shipToAddressField != null)) {
                    if ((shipToAddressField.Equals(value) != true)) {
                        this.shipToAddressField = value;
                        this.OnPropertyChanged("shipToAddress");
                    }
                }
                else {
                    this.shipToAddressField = value;
                    this.OnPropertyChanged("shipToAddress");
                }
            }
        }
        
        public cardType card {
            get {
                return this.cardField;
            }
            set {
                if ((this.cardField != null)) {
                    if ((cardField.Equals(value) != true)) {
                        this.cardField = value;
                        this.OnPropertyChanged("card");
                    }
                }
                else {
                    this.cardField = value;
                    this.OnPropertyChanged("card");
                }
            }
        }
        
        public cardTokenType token {
            get {
                return this.tokenField;
            }
            set {
                if ((this.tokenField != null)) {
                    if ((tokenField.Equals(value) != true)) {
                        this.tokenField = value;
                        this.OnPropertyChanged("token");
                    }
                }
                else {
                    this.tokenField = value;
                    this.OnPropertyChanged("token");
                }
            }
        }
        
        public cardPaypageType paypage {
            get {
                return this.paypageField;
            }
            set {
                if ((this.paypageField != null)) {
                    if ((paypageField.Equals(value) != true)) {
                        this.paypageField = value;
                        this.OnPropertyChanged("paypage");
                    }
                }
                else {
                    this.paypageField = value;
                    this.OnPropertyChanged("paypage");
                }
            }
        }
        
        public customBilling customBilling {
            get {
                return this.customBillingField;
            }
            set {
                if ((this.customBillingField != null)) {
                    if ((customBillingField.Equals(value) != true)) {
                        this.customBillingField = value;
                        this.OnPropertyChanged("customBilling");
                    }
                }
                else {
                    this.customBillingField = value;
                    this.OnPropertyChanged("customBilling");
                }
            }
        }
        
        public govtTaxTypeEnum taxType {
            get {
                return this.taxTypeField;
            }
            set {
                if ((taxTypeField.Equals(value) != true)) {
                    this.taxTypeField = value;
                    this.OnPropertyChanged("taxType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxTypeSpecified {
            get {
                return this.taxTypeFieldSpecified;
            }
            set {
                if ((taxTypeFieldSpecified.Equals(value) != true)) {
                    this.taxTypeFieldSpecified = value;
                    this.OnPropertyChanged("taxTypeSpecified");
                }
            }
        }
        
        public billMeLaterRequest billMeLaterRequest {
            get {
                return this.billMeLaterRequestField;
            }
            set {
                if ((this.billMeLaterRequestField != null)) {
                    if ((billMeLaterRequestField.Equals(value) != true)) {
                        this.billMeLaterRequestField = value;
                        this.OnPropertyChanged("billMeLaterRequest");
                    }
                }
                else {
                    this.billMeLaterRequestField = value;
                    this.OnPropertyChanged("billMeLaterRequest");
                }
            }
        }
        
        public enhancedData enhancedData {
            get {
                return this.enhancedDataField;
            }
            set {
                if ((this.enhancedDataField != null)) {
                    if ((enhancedDataField.Equals(value) != true)) {
                        this.enhancedDataField = value;
                        this.OnPropertyChanged("enhancedData");
                    }
                }
                else {
                    this.enhancedDataField = value;
                    this.OnPropertyChanged("enhancedData");
                }
            }
        }
        
        public processingInstructions processingInstructions {
            get {
                return this.processingInstructionsField;
            }
            set {
                if ((this.processingInstructionsField != null)) {
                    if ((processingInstructionsField.Equals(value) != true)) {
                        this.processingInstructionsField = value;
                        this.OnPropertyChanged("processingInstructions");
                    }
                }
                else {
                    this.processingInstructionsField = value;
                    this.OnPropertyChanged("processingInstructions");
                }
            }
        }
        
        public pos pos {
            get {
                return this.posField;
            }
            set {
                if ((this.posField != null)) {
                    if ((posField.Equals(value) != true)) {
                        this.posField = value;
                        this.OnPropertyChanged("pos");
                    }
                }
                else {
                    this.posField = value;
                    this.OnPropertyChanged("pos");
                }
            }
        }
        
        public amexAggregatorData amexAggregatorData {
            get {
                return this.amexAggregatorDataField;
            }
            set {
                if ((this.amexAggregatorDataField != null)) {
                    if ((amexAggregatorDataField.Equals(value) != true)) {
                        this.amexAggregatorDataField = value;
                        this.OnPropertyChanged("amexAggregatorData");
                    }
                }
                else {
                    this.amexAggregatorDataField = value;
                    this.OnPropertyChanged("amexAggregatorData");
                }
            }
        }
        
        public merchantDataType merchantData {
            get {
                return this.merchantDataField;
            }
            set {
                if ((this.merchantDataField != null)) {
                    if ((merchantDataField.Equals(value) != true)) {
                        this.merchantDataField = value;
                        this.OnPropertyChanged("merchantData");
                    }
                }
                else {
                    this.merchantDataField = value;
                    this.OnPropertyChanged("merchantData");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(captureGivenAuth));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current captureGivenAuth object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an captureGivenAuth object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output captureGivenAuth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out captureGivenAuth obj, out System.Exception exception) {
            exception = null;
            obj = default(captureGivenAuth);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out captureGivenAuth obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static captureGivenAuth Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((captureGivenAuth)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current captureGivenAuth object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an captureGivenAuth object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output captureGivenAuth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out captureGivenAuth obj, out System.Exception exception) {
            exception = null;
            obj = default(captureGivenAuth);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out captureGivenAuth obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static captureGivenAuth LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this captureGivenAuth object
        /// </summary>
        public virtual captureGivenAuth Clone() {
            return ((captureGivenAuth)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class authInformation : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime authDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private fraudResult fraudResultField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long authAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool authAmountFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public authInformation() {
            this.fraudResultField = new fraudResult();
        }
        
        public System.DateTime authDate {
            get {
                return this.authDateField;
            }
            set {
                if ((authDateField.Equals(value) != true)) {
                    this.authDateField = value;
                    this.OnPropertyChanged("authDate");
                }
            }
        }
        
        public string authCode {
            get {
                return this.authCodeField;
            }
            set {
                if ((this.authCodeField != null)) {
                    if ((authCodeField.Equals(value) != true)) {
                        this.authCodeField = value;
                        this.OnPropertyChanged("authCode");
                    }
                }
                else {
                    this.authCodeField = value;
                    this.OnPropertyChanged("authCode");
                }
            }
        }
        
        public fraudResult fraudResult {
            get {
                return this.fraudResultField;
            }
            set {
                if ((this.fraudResultField != null)) {
                    if ((fraudResultField.Equals(value) != true)) {
                        this.fraudResultField = value;
                        this.OnPropertyChanged("fraudResult");
                    }
                }
                else {
                    this.fraudResultField = value;
                    this.OnPropertyChanged("fraudResult");
                }
            }
        }
        
        public long authAmount {
            get {
                return this.authAmountField;
            }
            set {
                if ((authAmountField.Equals(value) != true)) {
                    this.authAmountField = value;
                    this.OnPropertyChanged("authAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool authAmountSpecified {
            get {
                return this.authAmountFieldSpecified;
            }
            set {
                if ((authAmountFieldSpecified.Equals(value) != true)) {
                    this.authAmountFieldSpecified = value;
                    this.OnPropertyChanged("authAmountSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(authInformation));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current authInformation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an authInformation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output authInformation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out authInformation obj, out System.Exception exception) {
            exception = null;
            obj = default(authInformation);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out authInformation obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static authInformation Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((authInformation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current authInformation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an authInformation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output authInformation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out authInformation obj, out System.Exception exception) {
            exception = null;
            obj = default(authInformation);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out authInformation obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static authInformation LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this authInformation object
        /// </summary>
        public virtual authInformation Clone() {
            return ((authInformation)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class fraudResult : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string avsResultField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cardValidationResultField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authenticationResultField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string advancedAVSResultField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string avsResult {
            get {
                return this.avsResultField;
            }
            set {
                if ((this.avsResultField != null)) {
                    if ((avsResultField.Equals(value) != true)) {
                        this.avsResultField = value;
                        this.OnPropertyChanged("avsResult");
                    }
                }
                else {
                    this.avsResultField = value;
                    this.OnPropertyChanged("avsResult");
                }
            }
        }
        
        public string cardValidationResult {
            get {
                return this.cardValidationResultField;
            }
            set {
                if ((this.cardValidationResultField != null)) {
                    if ((cardValidationResultField.Equals(value) != true)) {
                        this.cardValidationResultField = value;
                        this.OnPropertyChanged("cardValidationResult");
                    }
                }
                else {
                    this.cardValidationResultField = value;
                    this.OnPropertyChanged("cardValidationResult");
                }
            }
        }
        
        public string authenticationResult {
            get {
                return this.authenticationResultField;
            }
            set {
                if ((this.authenticationResultField != null)) {
                    if ((authenticationResultField.Equals(value) != true)) {
                        this.authenticationResultField = value;
                        this.OnPropertyChanged("authenticationResult");
                    }
                }
                else {
                    this.authenticationResultField = value;
                    this.OnPropertyChanged("authenticationResult");
                }
            }
        }
        
        public string advancedAVSResult {
            get {
                return this.advancedAVSResultField;
            }
            set {
                if ((this.advancedAVSResultField != null)) {
                    if ((advancedAVSResultField.Equals(value) != true)) {
                        this.advancedAVSResultField = value;
                        this.OnPropertyChanged("advancedAVSResult");
                    }
                }
                else {
                    this.advancedAVSResultField = value;
                    this.OnPropertyChanged("advancedAVSResult");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(fraudResult));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current fraudResult object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an fraudResult object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output fraudResult object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out fraudResult obj, out System.Exception exception) {
            exception = null;
            obj = default(fraudResult);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out fraudResult obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static fraudResult Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((fraudResult)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current fraudResult object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an fraudResult object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output fraudResult object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out fraudResult obj, out System.Exception exception) {
            exception = null;
            obj = default(fraudResult);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out fraudResult obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static fraudResult LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this fraudResult object
        /// </summary>
        public virtual fraudResult Clone() {
            return ((fraudResult)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class sale : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool litleTxnIdFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customerInfo customerInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact shipToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardType cardField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private payPal paypalField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardTokenType tokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardPaypageType paypageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private billMeLaterRequest billMeLaterRequestField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private fraudCheckType fraudCheckField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private fraudCheckType cardholderAuthenticationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBillingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private govtTaxTypeEnum taxTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxTypeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedData enhancedDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructionsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private pos posField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool payPalOrderCompleteField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool payPalOrderCompleteFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string payPalNotesField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private amexAggregatorData amexAggregatorDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool allowPartialAuthField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool allowPartialAuthFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private healthcareIIAS healthcareIIASField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private filteringType filteringField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private merchantDataType merchantDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private recyclingRequestType recyclingRequestField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public sale() {
            this.recyclingRequestField = new recyclingRequestType();
            this.merchantDataField = new merchantDataType();
            this.filteringField = new filteringType();
            this.healthcareIIASField = new healthcareIIAS();
            this.amexAggregatorDataField = new amexAggregatorData();
            this.posField = new pos();
            this.processingInstructionsField = new processingInstructions();
            this.enhancedDataField = new enhancedData();
            this.customBillingField = new customBilling();
            this.cardholderAuthenticationField = new fraudCheckType();
            this.fraudCheckField = new fraudCheckType();
            this.billMeLaterRequestField = new billMeLaterRequest();
            this.paypageField = new cardPaypageType();
            this.tokenField = new cardTokenType();
            this.paypalField = new payPal();
            this.cardField = new cardType();
            this.shipToAddressField = new contact();
            this.billToAddressField = new contact();
            this.customerInfoField = new customerInfo();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool litleTxnIdSpecified {
            get {
                return this.litleTxnIdFieldSpecified;
            }
            set {
                if ((litleTxnIdFieldSpecified.Equals(value) != true)) {
                    this.litleTxnIdFieldSpecified = value;
                    this.OnPropertyChanged("litleTxnIdSpecified");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public customerInfo customerInfo {
            get {
                return this.customerInfoField;
            }
            set {
                if ((this.customerInfoField != null)) {
                    if ((customerInfoField.Equals(value) != true)) {
                        this.customerInfoField = value;
                        this.OnPropertyChanged("customerInfo");
                    }
                }
                else {
                    this.customerInfoField = value;
                    this.OnPropertyChanged("customerInfo");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public contact shipToAddress {
            get {
                return this.shipToAddressField;
            }
            set {
                if ((this.shipToAddressField != null)) {
                    if ((shipToAddressField.Equals(value) != true)) {
                        this.shipToAddressField = value;
                        this.OnPropertyChanged("shipToAddress");
                    }
                }
                else {
                    this.shipToAddressField = value;
                    this.OnPropertyChanged("shipToAddress");
                }
            }
        }
        
        public cardType card {
            get {
                return this.cardField;
            }
            set {
                if ((this.cardField != null)) {
                    if ((cardField.Equals(value) != true)) {
                        this.cardField = value;
                        this.OnPropertyChanged("card");
                    }
                }
                else {
                    this.cardField = value;
                    this.OnPropertyChanged("card");
                }
            }
        }
        
        public payPal paypal {
            get {
                return this.paypalField;
            }
            set {
                if ((this.paypalField != null)) {
                    if ((paypalField.Equals(value) != true)) {
                        this.paypalField = value;
                        this.OnPropertyChanged("paypal");
                    }
                }
                else {
                    this.paypalField = value;
                    this.OnPropertyChanged("paypal");
                }
            }
        }
        
        public cardTokenType token {
            get {
                return this.tokenField;
            }
            set {
                if ((this.tokenField != null)) {
                    if ((tokenField.Equals(value) != true)) {
                        this.tokenField = value;
                        this.OnPropertyChanged("token");
                    }
                }
                else {
                    this.tokenField = value;
                    this.OnPropertyChanged("token");
                }
            }
        }
        
        public cardPaypageType paypage {
            get {
                return this.paypageField;
            }
            set {
                if ((this.paypageField != null)) {
                    if ((paypageField.Equals(value) != true)) {
                        this.paypageField = value;
                        this.OnPropertyChanged("paypage");
                    }
                }
                else {
                    this.paypageField = value;
                    this.OnPropertyChanged("paypage");
                }
            }
        }
        
        public billMeLaterRequest billMeLaterRequest {
            get {
                return this.billMeLaterRequestField;
            }
            set {
                if ((this.billMeLaterRequestField != null)) {
                    if ((billMeLaterRequestField.Equals(value) != true)) {
                        this.billMeLaterRequestField = value;
                        this.OnPropertyChanged("billMeLaterRequest");
                    }
                }
                else {
                    this.billMeLaterRequestField = value;
                    this.OnPropertyChanged("billMeLaterRequest");
                }
            }
        }
        
        public fraudCheckType fraudCheck {
            get {
                return this.fraudCheckField;
            }
            set {
                if ((this.fraudCheckField != null)) {
                    if ((fraudCheckField.Equals(value) != true)) {
                        this.fraudCheckField = value;
                        this.OnPropertyChanged("fraudCheck");
                    }
                }
                else {
                    this.fraudCheckField = value;
                    this.OnPropertyChanged("fraudCheck");
                }
            }
        }
        
        public fraudCheckType cardholderAuthentication {
            get {
                return this.cardholderAuthenticationField;
            }
            set {
                if ((this.cardholderAuthenticationField != null)) {
                    if ((cardholderAuthenticationField.Equals(value) != true)) {
                        this.cardholderAuthenticationField = value;
                        this.OnPropertyChanged("cardholderAuthentication");
                    }
                }
                else {
                    this.cardholderAuthenticationField = value;
                    this.OnPropertyChanged("cardholderAuthentication");
                }
            }
        }
        
        public customBilling customBilling {
            get {
                return this.customBillingField;
            }
            set {
                if ((this.customBillingField != null)) {
                    if ((customBillingField.Equals(value) != true)) {
                        this.customBillingField = value;
                        this.OnPropertyChanged("customBilling");
                    }
                }
                else {
                    this.customBillingField = value;
                    this.OnPropertyChanged("customBilling");
                }
            }
        }
        
        public govtTaxTypeEnum taxType {
            get {
                return this.taxTypeField;
            }
            set {
                if ((taxTypeField.Equals(value) != true)) {
                    this.taxTypeField = value;
                    this.OnPropertyChanged("taxType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxTypeSpecified {
            get {
                return this.taxTypeFieldSpecified;
            }
            set {
                if ((taxTypeFieldSpecified.Equals(value) != true)) {
                    this.taxTypeFieldSpecified = value;
                    this.OnPropertyChanged("taxTypeSpecified");
                }
            }
        }
        
        public enhancedData enhancedData {
            get {
                return this.enhancedDataField;
            }
            set {
                if ((this.enhancedDataField != null)) {
                    if ((enhancedDataField.Equals(value) != true)) {
                        this.enhancedDataField = value;
                        this.OnPropertyChanged("enhancedData");
                    }
                }
                else {
                    this.enhancedDataField = value;
                    this.OnPropertyChanged("enhancedData");
                }
            }
        }
        
        public processingInstructions processingInstructions {
            get {
                return this.processingInstructionsField;
            }
            set {
                if ((this.processingInstructionsField != null)) {
                    if ((processingInstructionsField.Equals(value) != true)) {
                        this.processingInstructionsField = value;
                        this.OnPropertyChanged("processingInstructions");
                    }
                }
                else {
                    this.processingInstructionsField = value;
                    this.OnPropertyChanged("processingInstructions");
                }
            }
        }
        
        public pos pos {
            get {
                return this.posField;
            }
            set {
                if ((this.posField != null)) {
                    if ((posField.Equals(value) != true)) {
                        this.posField = value;
                        this.OnPropertyChanged("pos");
                    }
                }
                else {
                    this.posField = value;
                    this.OnPropertyChanged("pos");
                }
            }
        }
        
        public bool payPalOrderComplete {
            get {
                return this.payPalOrderCompleteField;
            }
            set {
                if ((payPalOrderCompleteField.Equals(value) != true)) {
                    this.payPalOrderCompleteField = value;
                    this.OnPropertyChanged("payPalOrderComplete");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool payPalOrderCompleteSpecified {
            get {
                return this.payPalOrderCompleteFieldSpecified;
            }
            set {
                if ((payPalOrderCompleteFieldSpecified.Equals(value) != true)) {
                    this.payPalOrderCompleteFieldSpecified = value;
                    this.OnPropertyChanged("payPalOrderCompleteSpecified");
                }
            }
        }
        
        public string payPalNotes {
            get {
                return this.payPalNotesField;
            }
            set {
                if ((this.payPalNotesField != null)) {
                    if ((payPalNotesField.Equals(value) != true)) {
                        this.payPalNotesField = value;
                        this.OnPropertyChanged("payPalNotes");
                    }
                }
                else {
                    this.payPalNotesField = value;
                    this.OnPropertyChanged("payPalNotes");
                }
            }
        }
        
        public amexAggregatorData amexAggregatorData {
            get {
                return this.amexAggregatorDataField;
            }
            set {
                if ((this.amexAggregatorDataField != null)) {
                    if ((amexAggregatorDataField.Equals(value) != true)) {
                        this.amexAggregatorDataField = value;
                        this.OnPropertyChanged("amexAggregatorData");
                    }
                }
                else {
                    this.amexAggregatorDataField = value;
                    this.OnPropertyChanged("amexAggregatorData");
                }
            }
        }
        
        public bool allowPartialAuth {
            get {
                return this.allowPartialAuthField;
            }
            set {
                if ((allowPartialAuthField.Equals(value) != true)) {
                    this.allowPartialAuthField = value;
                    this.OnPropertyChanged("allowPartialAuth");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowPartialAuthSpecified {
            get {
                return this.allowPartialAuthFieldSpecified;
            }
            set {
                if ((allowPartialAuthFieldSpecified.Equals(value) != true)) {
                    this.allowPartialAuthFieldSpecified = value;
                    this.OnPropertyChanged("allowPartialAuthSpecified");
                }
            }
        }
        
        public healthcareIIAS healthcareIIAS {
            get {
                return this.healthcareIIASField;
            }
            set {
                if ((this.healthcareIIASField != null)) {
                    if ((healthcareIIASField.Equals(value) != true)) {
                        this.healthcareIIASField = value;
                        this.OnPropertyChanged("healthcareIIAS");
                    }
                }
                else {
                    this.healthcareIIASField = value;
                    this.OnPropertyChanged("healthcareIIAS");
                }
            }
        }
        
        public filteringType filtering {
            get {
                return this.filteringField;
            }
            set {
                if ((this.filteringField != null)) {
                    if ((filteringField.Equals(value) != true)) {
                        this.filteringField = value;
                        this.OnPropertyChanged("filtering");
                    }
                }
                else {
                    this.filteringField = value;
                    this.OnPropertyChanged("filtering");
                }
            }
        }
        
        public merchantDataType merchantData {
            get {
                return this.merchantDataField;
            }
            set {
                if ((this.merchantDataField != null)) {
                    if ((merchantDataField.Equals(value) != true)) {
                        this.merchantDataField = value;
                        this.OnPropertyChanged("merchantData");
                    }
                }
                else {
                    this.merchantDataField = value;
                    this.OnPropertyChanged("merchantData");
                }
            }
        }
        
        public recyclingRequestType recyclingRequest {
            get {
                return this.recyclingRequestField;
            }
            set {
                if ((this.recyclingRequestField != null)) {
                    if ((recyclingRequestField.Equals(value) != true)) {
                        this.recyclingRequestField = value;
                        this.OnPropertyChanged("recyclingRequest");
                    }
                }
                else {
                    this.recyclingRequestField = value;
                    this.OnPropertyChanged("recyclingRequest");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(sale));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current sale object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an sale object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output sale object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out sale obj, out System.Exception exception) {
            exception = null;
            obj = default(sale);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out sale obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static sale Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((sale)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current sale object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an sale object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output sale object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out sale obj, out System.Exception exception) {
            exception = null;
            obj = default(sale);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out sale obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static sale LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this sale object
        /// </summary>
        public virtual sale Clone() {
            return ((sale)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class credit : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool amountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBillingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedData enhancedDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructionsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amount1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardType cardField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardTokenType tokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardPaypageType paypageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private creditPaypal paypalField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBilling1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private govtTaxTypeEnum taxTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool taxTypeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private billMeLaterRequest billMeLaterRequestField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedData enhancedData1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructions1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private pos posField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private amexAggregatorData amexAggregatorDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private merchantDataType merchantDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string payPalNotesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public credit() {
            this.merchantDataField = new merchantDataType();
            this.amexAggregatorDataField = new amexAggregatorData();
            this.posField = new pos();
            this.processingInstructions1Field = new processingInstructions();
            this.enhancedData1Field = new enhancedData();
            this.billMeLaterRequestField = new billMeLaterRequest();
            this.customBilling1Field = new customBilling();
            this.paypalField = new creditPaypal();
            this.paypageField = new cardPaypageType();
            this.tokenField = new cardTokenType();
            this.cardField = new cardType();
            this.billToAddressField = new contact();
            this.processingInstructionsField = new processingInstructions();
            this.enhancedDataField = new enhancedData();
            this.customBillingField = new customBilling();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool amountSpecified {
            get {
                return this.amountFieldSpecified;
            }
            set {
                if ((amountFieldSpecified.Equals(value) != true)) {
                    this.amountFieldSpecified = value;
                    this.OnPropertyChanged("amountSpecified");
                }
            }
        }
        
        public customBilling customBilling {
            get {
                return this.customBillingField;
            }
            set {
                if ((this.customBillingField != null)) {
                    if ((customBillingField.Equals(value) != true)) {
                        this.customBillingField = value;
                        this.OnPropertyChanged("customBilling");
                    }
                }
                else {
                    this.customBillingField = value;
                    this.OnPropertyChanged("customBilling");
                }
            }
        }
        
        public enhancedData enhancedData {
            get {
                return this.enhancedDataField;
            }
            set {
                if ((this.enhancedDataField != null)) {
                    if ((enhancedDataField.Equals(value) != true)) {
                        this.enhancedDataField = value;
                        this.OnPropertyChanged("enhancedData");
                    }
                }
                else {
                    this.enhancedDataField = value;
                    this.OnPropertyChanged("enhancedData");
                }
            }
        }
        
        public processingInstructions processingInstructions {
            get {
                return this.processingInstructionsField;
            }
            set {
                if ((this.processingInstructionsField != null)) {
                    if ((processingInstructionsField.Equals(value) != true)) {
                        this.processingInstructionsField = value;
                        this.OnPropertyChanged("processingInstructions");
                    }
                }
                else {
                    this.processingInstructionsField = value;
                    this.OnPropertyChanged("processingInstructions");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public long amount1 {
            get {
                return this.amount1Field;
            }
            set {
                if ((amount1Field.Equals(value) != true)) {
                    this.amount1Field = value;
                    this.OnPropertyChanged("amount1");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public cardType card {
            get {
                return this.cardField;
            }
            set {
                if ((this.cardField != null)) {
                    if ((cardField.Equals(value) != true)) {
                        this.cardField = value;
                        this.OnPropertyChanged("card");
                    }
                }
                else {
                    this.cardField = value;
                    this.OnPropertyChanged("card");
                }
            }
        }
        
        public cardTokenType token {
            get {
                return this.tokenField;
            }
            set {
                if ((this.tokenField != null)) {
                    if ((tokenField.Equals(value) != true)) {
                        this.tokenField = value;
                        this.OnPropertyChanged("token");
                    }
                }
                else {
                    this.tokenField = value;
                    this.OnPropertyChanged("token");
                }
            }
        }
        
        public cardPaypageType paypage {
            get {
                return this.paypageField;
            }
            set {
                if ((this.paypageField != null)) {
                    if ((paypageField.Equals(value) != true)) {
                        this.paypageField = value;
                        this.OnPropertyChanged("paypage");
                    }
                }
                else {
                    this.paypageField = value;
                    this.OnPropertyChanged("paypage");
                }
            }
        }
        
        public creditPaypal paypal {
            get {
                return this.paypalField;
            }
            set {
                if ((this.paypalField != null)) {
                    if ((paypalField.Equals(value) != true)) {
                        this.paypalField = value;
                        this.OnPropertyChanged("paypal");
                    }
                }
                else {
                    this.paypalField = value;
                    this.OnPropertyChanged("paypal");
                }
            }
        }
        
        public customBilling customBilling1 {
            get {
                return this.customBilling1Field;
            }
            set {
                if ((this.customBilling1Field != null)) {
                    if ((customBilling1Field.Equals(value) != true)) {
                        this.customBilling1Field = value;
                        this.OnPropertyChanged("customBilling1");
                    }
                }
                else {
                    this.customBilling1Field = value;
                    this.OnPropertyChanged("customBilling1");
                }
            }
        }
        
        public govtTaxTypeEnum taxType {
            get {
                return this.taxTypeField;
            }
            set {
                if ((taxTypeField.Equals(value) != true)) {
                    this.taxTypeField = value;
                    this.OnPropertyChanged("taxType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxTypeSpecified {
            get {
                return this.taxTypeFieldSpecified;
            }
            set {
                if ((taxTypeFieldSpecified.Equals(value) != true)) {
                    this.taxTypeFieldSpecified = value;
                    this.OnPropertyChanged("taxTypeSpecified");
                }
            }
        }
        
        public billMeLaterRequest billMeLaterRequest {
            get {
                return this.billMeLaterRequestField;
            }
            set {
                if ((this.billMeLaterRequestField != null)) {
                    if ((billMeLaterRequestField.Equals(value) != true)) {
                        this.billMeLaterRequestField = value;
                        this.OnPropertyChanged("billMeLaterRequest");
                    }
                }
                else {
                    this.billMeLaterRequestField = value;
                    this.OnPropertyChanged("billMeLaterRequest");
                }
            }
        }
        
        public enhancedData enhancedData1 {
            get {
                return this.enhancedData1Field;
            }
            set {
                if ((this.enhancedData1Field != null)) {
                    if ((enhancedData1Field.Equals(value) != true)) {
                        this.enhancedData1Field = value;
                        this.OnPropertyChanged("enhancedData1");
                    }
                }
                else {
                    this.enhancedData1Field = value;
                    this.OnPropertyChanged("enhancedData1");
                }
            }
        }
        
        public processingInstructions processingInstructions1 {
            get {
                return this.processingInstructions1Field;
            }
            set {
                if ((this.processingInstructions1Field != null)) {
                    if ((processingInstructions1Field.Equals(value) != true)) {
                        this.processingInstructions1Field = value;
                        this.OnPropertyChanged("processingInstructions1");
                    }
                }
                else {
                    this.processingInstructions1Field = value;
                    this.OnPropertyChanged("processingInstructions1");
                }
            }
        }
        
        public pos pos {
            get {
                return this.posField;
            }
            set {
                if ((this.posField != null)) {
                    if ((posField.Equals(value) != true)) {
                        this.posField = value;
                        this.OnPropertyChanged("pos");
                    }
                }
                else {
                    this.posField = value;
                    this.OnPropertyChanged("pos");
                }
            }
        }
        
        public amexAggregatorData amexAggregatorData {
            get {
                return this.amexAggregatorDataField;
            }
            set {
                if ((this.amexAggregatorDataField != null)) {
                    if ((amexAggregatorDataField.Equals(value) != true)) {
                        this.amexAggregatorDataField = value;
                        this.OnPropertyChanged("amexAggregatorData");
                    }
                }
                else {
                    this.amexAggregatorDataField = value;
                    this.OnPropertyChanged("amexAggregatorData");
                }
            }
        }
        
        public merchantDataType merchantData {
            get {
                return this.merchantDataField;
            }
            set {
                if ((this.merchantDataField != null)) {
                    if ((merchantDataField.Equals(value) != true)) {
                        this.merchantDataField = value;
                        this.OnPropertyChanged("merchantData");
                    }
                }
                else {
                    this.merchantDataField = value;
                    this.OnPropertyChanged("merchantData");
                }
            }
        }
        
        public string payPalNotes {
            get {
                return this.payPalNotesField;
            }
            set {
                if ((this.payPalNotesField != null)) {
                    if ((payPalNotesField.Equals(value) != true)) {
                        this.payPalNotesField = value;
                        this.OnPropertyChanged("payPalNotes");
                    }
                }
                else {
                    this.payPalNotesField = value;
                    this.OnPropertyChanged("payPalNotes");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(credit));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current credit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an credit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output credit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out credit obj, out System.Exception exception) {
            exception = null;
            obj = default(credit);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out credit obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static credit Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((credit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current credit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an credit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output credit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out credit obj, out System.Exception exception) {
            exception = null;
            obj = default(credit);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out credit obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static credit LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this credit object
        /// </summary>
        public virtual credit Clone() {
            return ((credit)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class creditPaypal : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string payerIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string payerEmailField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string payerId {
            get {
                return this.payerIdField;
            }
            set {
                if ((this.payerIdField != null)) {
                    if ((payerIdField.Equals(value) != true)) {
                        this.payerIdField = value;
                        this.OnPropertyChanged("payerId");
                    }
                }
                else {
                    this.payerIdField = value;
                    this.OnPropertyChanged("payerId");
                }
            }
        }
        
        public string payerEmail {
            get {
                return this.payerEmailField;
            }
            set {
                if ((this.payerEmailField != null)) {
                    if ((payerEmailField.Equals(value) != true)) {
                        this.payerEmailField = value;
                        this.OnPropertyChanged("payerEmail");
                    }
                }
                else {
                    this.payerEmailField = value;
                    this.OnPropertyChanged("payerEmail");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(creditPaypal));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current creditPaypal object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an creditPaypal object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output creditPaypal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out creditPaypal obj, out System.Exception exception) {
            exception = null;
            obj = default(creditPaypal);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out creditPaypal obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static creditPaypal Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((creditPaypal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current creditPaypal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an creditPaypal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output creditPaypal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out creditPaypal obj, out System.Exception exception) {
            exception = null;
            obj = default(creditPaypal);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out creditPaypal obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static creditPaypal LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this creditPaypal object
        /// </summary>
        public virtual creditPaypal Clone() {
            return ((creditPaypal)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class registerTokenResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string litleTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string binField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool typeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string eCheckAccountSuffixField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string litleToken {
            get {
                return this.litleTokenField;
            }
            set {
                if ((this.litleTokenField != null)) {
                    if ((litleTokenField.Equals(value) != true)) {
                        this.litleTokenField = value;
                        this.OnPropertyChanged("litleToken");
                    }
                }
                else {
                    this.litleTokenField = value;
                    this.OnPropertyChanged("litleToken");
                }
            }
        }
        
        public string bin {
            get {
                return this.binField;
            }
            set {
                if ((this.binField != null)) {
                    if ((binField.Equals(value) != true)) {
                        this.binField = value;
                        this.OnPropertyChanged("bin");
                    }
                }
                else {
                    this.binField = value;
                    this.OnPropertyChanged("bin");
                }
            }
        }
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("typeSpecified");
                }
            }
        }
        
        public string eCheckAccountSuffix {
            get {
                return this.eCheckAccountSuffixField;
            }
            set {
                if ((this.eCheckAccountSuffixField != null)) {
                    if ((eCheckAccountSuffixField.Equals(value) != true)) {
                        this.eCheckAccountSuffixField = value;
                        this.OnPropertyChanged("eCheckAccountSuffix");
                    }
                }
                else {
                    this.eCheckAccountSuffixField = value;
                    this.OnPropertyChanged("eCheckAccountSuffix");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(registerTokenResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current registerTokenResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an registerTokenResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output registerTokenResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out registerTokenResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(registerTokenResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out registerTokenResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static registerTokenResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((registerTokenResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current registerTokenResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an registerTokenResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output registerTokenResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out registerTokenResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(registerTokenResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out registerTokenResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static registerTokenResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this registerTokenResponse object
        /// </summary>
        public virtual registerTokenResponse Clone() {
            return ((registerTokenResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class authorizationResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cardProductIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authorizationResponseSubCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long approvedAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool approvedAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountInfoType accountInformationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountUpdater accountUpdaterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private fraudResult fraudResultField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private billMeLaterResponseData billMeLaterResponseDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedAuthResponse enhancedAuthResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private recyclingType recyclingField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public authorizationResponse() {
            this.recyclingField = new recyclingType();
            this.enhancedAuthResponseField = new enhancedAuthResponse();
            this.tokenResponseField = new tokenResponseType();
            this.billMeLaterResponseDataField = new billMeLaterResponseData();
            this.fraudResultField = new fraudResult();
            this.accountUpdaterField = new accountUpdater();
            this.accountInformationField = new accountInfoType();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public string cardProductId {
            get {
                return this.cardProductIdField;
            }
            set {
                if ((this.cardProductIdField != null)) {
                    if ((cardProductIdField.Equals(value) != true)) {
                        this.cardProductIdField = value;
                        this.OnPropertyChanged("cardProductId");
                    }
                }
                else {
                    this.cardProductIdField = value;
                    this.OnPropertyChanged("cardProductId");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public string authCode {
            get {
                return this.authCodeField;
            }
            set {
                if ((this.authCodeField != null)) {
                    if ((authCodeField.Equals(value) != true)) {
                        this.authCodeField = value;
                        this.OnPropertyChanged("authCode");
                    }
                }
                else {
                    this.authCodeField = value;
                    this.OnPropertyChanged("authCode");
                }
            }
        }
        
        public string authorizationResponseSubCode {
            get {
                return this.authorizationResponseSubCodeField;
            }
            set {
                if ((this.authorizationResponseSubCodeField != null)) {
                    if ((authorizationResponseSubCodeField.Equals(value) != true)) {
                        this.authorizationResponseSubCodeField = value;
                        this.OnPropertyChanged("authorizationResponseSubCode");
                    }
                }
                else {
                    this.authorizationResponseSubCodeField = value;
                    this.OnPropertyChanged("authorizationResponseSubCode");
                }
            }
        }
        
        public long approvedAmount {
            get {
                return this.approvedAmountField;
            }
            set {
                if ((approvedAmountField.Equals(value) != true)) {
                    this.approvedAmountField = value;
                    this.OnPropertyChanged("approvedAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool approvedAmountSpecified {
            get {
                return this.approvedAmountFieldSpecified;
            }
            set {
                if ((approvedAmountFieldSpecified.Equals(value) != true)) {
                    this.approvedAmountFieldSpecified = value;
                    this.OnPropertyChanged("approvedAmountSpecified");
                }
            }
        }
        
        public accountInfoType accountInformation {
            get {
                return this.accountInformationField;
            }
            set {
                if ((this.accountInformationField != null)) {
                    if ((accountInformationField.Equals(value) != true)) {
                        this.accountInformationField = value;
                        this.OnPropertyChanged("accountInformation");
                    }
                }
                else {
                    this.accountInformationField = value;
                    this.OnPropertyChanged("accountInformation");
                }
            }
        }
        
        public accountUpdater accountUpdater {
            get {
                return this.accountUpdaterField;
            }
            set {
                if ((this.accountUpdaterField != null)) {
                    if ((accountUpdaterField.Equals(value) != true)) {
                        this.accountUpdaterField = value;
                        this.OnPropertyChanged("accountUpdater");
                    }
                }
                else {
                    this.accountUpdaterField = value;
                    this.OnPropertyChanged("accountUpdater");
                }
            }
        }
        
        public fraudResult fraudResult {
            get {
                return this.fraudResultField;
            }
            set {
                if ((this.fraudResultField != null)) {
                    if ((fraudResultField.Equals(value) != true)) {
                        this.fraudResultField = value;
                        this.OnPropertyChanged("fraudResult");
                    }
                }
                else {
                    this.fraudResultField = value;
                    this.OnPropertyChanged("fraudResult");
                }
            }
        }
        
        public billMeLaterResponseData billMeLaterResponseData {
            get {
                return this.billMeLaterResponseDataField;
            }
            set {
                if ((this.billMeLaterResponseDataField != null)) {
                    if ((billMeLaterResponseDataField.Equals(value) != true)) {
                        this.billMeLaterResponseDataField = value;
                        this.OnPropertyChanged("billMeLaterResponseData");
                    }
                }
                else {
                    this.billMeLaterResponseDataField = value;
                    this.OnPropertyChanged("billMeLaterResponseData");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        public enhancedAuthResponse enhancedAuthResponse {
            get {
                return this.enhancedAuthResponseField;
            }
            set {
                if ((this.enhancedAuthResponseField != null)) {
                    if ((enhancedAuthResponseField.Equals(value) != true)) {
                        this.enhancedAuthResponseField = value;
                        this.OnPropertyChanged("enhancedAuthResponse");
                    }
                }
                else {
                    this.enhancedAuthResponseField = value;
                    this.OnPropertyChanged("enhancedAuthResponse");
                }
            }
        }
        
        public recyclingType recycling {
            get {
                return this.recyclingField;
            }
            set {
                if ((this.recyclingField != null)) {
                    if ((recyclingField.Equals(value) != true)) {
                        this.recyclingField = value;
                        this.OnPropertyChanged("recycling");
                    }
                }
                else {
                    this.recyclingField = value;
                    this.OnPropertyChanged("recycling");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(authorizationResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current authorizationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an authorizationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output authorizationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out authorizationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(authorizationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out authorizationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static authorizationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((authorizationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current authorizationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an authorizationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output authorizationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out authorizationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(authorizationResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out authorizationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static authorizationResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this authorizationResponse object
        /// </summary>
        public virtual authorizationResponse Clone() {
            return ((authorizationResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class accountInfoType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string numberField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        public string number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField != null)) {
                    if ((numberField.Equals(value) != true)) {
                        this.numberField = value;
                        this.OnPropertyChanged("number");
                    }
                }
                else {
                    this.numberField = value;
                    this.OnPropertyChanged("number");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(accountInfoType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current accountInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an accountInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output accountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out accountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(accountInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out accountInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static accountInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((accountInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current accountInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an accountInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output accountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out accountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(accountInfoType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out accountInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static accountInfoType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this accountInfoType object
        /// </summary>
        public virtual accountInfoType Clone() {
            return ((accountInfoType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class accountUpdater : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckAccountInfoType originalAccountInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckAccountInfoType newAccountInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckTokenInfoType originalTokenInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckTokenInfoType newTokenInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardAccountInfoType originalCardInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardAccountInfoType newCardInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private extendedCardResponseType extendedCardResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardTokenInfoType originalCardTokenInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardTokenInfoType newCardTokenInfoField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private extendedCardResponseType extendedCardResponse1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public accountUpdater() {
            this.extendedCardResponse1Field = new extendedCardResponseType();
            this.newCardTokenInfoField = new cardTokenInfoType();
            this.originalCardTokenInfoField = new cardTokenInfoType();
            this.extendedCardResponseField = new extendedCardResponseType();
            this.newCardInfoField = new cardAccountInfoType();
            this.originalCardInfoField = new cardAccountInfoType();
            this.newTokenInfoField = new echeckTokenInfoType();
            this.originalTokenInfoField = new echeckTokenInfoType();
            this.newAccountInfoField = new echeckAccountInfoType();
            this.originalAccountInfoField = new echeckAccountInfoType();
        }
        
        public echeckAccountInfoType originalAccountInfo {
            get {
                return this.originalAccountInfoField;
            }
            set {
                if ((this.originalAccountInfoField != null)) {
                    if ((originalAccountInfoField.Equals(value) != true)) {
                        this.originalAccountInfoField = value;
                        this.OnPropertyChanged("originalAccountInfo");
                    }
                }
                else {
                    this.originalAccountInfoField = value;
                    this.OnPropertyChanged("originalAccountInfo");
                }
            }
        }
        
        public echeckAccountInfoType newAccountInfo {
            get {
                return this.newAccountInfoField;
            }
            set {
                if ((this.newAccountInfoField != null)) {
                    if ((newAccountInfoField.Equals(value) != true)) {
                        this.newAccountInfoField = value;
                        this.OnPropertyChanged("newAccountInfo");
                    }
                }
                else {
                    this.newAccountInfoField = value;
                    this.OnPropertyChanged("newAccountInfo");
                }
            }
        }
        
        public echeckTokenInfoType originalTokenInfo {
            get {
                return this.originalTokenInfoField;
            }
            set {
                if ((this.originalTokenInfoField != null)) {
                    if ((originalTokenInfoField.Equals(value) != true)) {
                        this.originalTokenInfoField = value;
                        this.OnPropertyChanged("originalTokenInfo");
                    }
                }
                else {
                    this.originalTokenInfoField = value;
                    this.OnPropertyChanged("originalTokenInfo");
                }
            }
        }
        
        public echeckTokenInfoType newTokenInfo {
            get {
                return this.newTokenInfoField;
            }
            set {
                if ((this.newTokenInfoField != null)) {
                    if ((newTokenInfoField.Equals(value) != true)) {
                        this.newTokenInfoField = value;
                        this.OnPropertyChanged("newTokenInfo");
                    }
                }
                else {
                    this.newTokenInfoField = value;
                    this.OnPropertyChanged("newTokenInfo");
                }
            }
        }
        
        public cardAccountInfoType originalCardInfo {
            get {
                return this.originalCardInfoField;
            }
            set {
                if ((this.originalCardInfoField != null)) {
                    if ((originalCardInfoField.Equals(value) != true)) {
                        this.originalCardInfoField = value;
                        this.OnPropertyChanged("originalCardInfo");
                    }
                }
                else {
                    this.originalCardInfoField = value;
                    this.OnPropertyChanged("originalCardInfo");
                }
            }
        }
        
        public cardAccountInfoType newCardInfo {
            get {
                return this.newCardInfoField;
            }
            set {
                if ((this.newCardInfoField != null)) {
                    if ((newCardInfoField.Equals(value) != true)) {
                        this.newCardInfoField = value;
                        this.OnPropertyChanged("newCardInfo");
                    }
                }
                else {
                    this.newCardInfoField = value;
                    this.OnPropertyChanged("newCardInfo");
                }
            }
        }
        
        public extendedCardResponseType extendedCardResponse {
            get {
                return this.extendedCardResponseField;
            }
            set {
                if ((this.extendedCardResponseField != null)) {
                    if ((extendedCardResponseField.Equals(value) != true)) {
                        this.extendedCardResponseField = value;
                        this.OnPropertyChanged("extendedCardResponse");
                    }
                }
                else {
                    this.extendedCardResponseField = value;
                    this.OnPropertyChanged("extendedCardResponse");
                }
            }
        }
        
        public cardTokenInfoType originalCardTokenInfo {
            get {
                return this.originalCardTokenInfoField;
            }
            set {
                if ((this.originalCardTokenInfoField != null)) {
                    if ((originalCardTokenInfoField.Equals(value) != true)) {
                        this.originalCardTokenInfoField = value;
                        this.OnPropertyChanged("originalCardTokenInfo");
                    }
                }
                else {
                    this.originalCardTokenInfoField = value;
                    this.OnPropertyChanged("originalCardTokenInfo");
                }
            }
        }
        
        public cardTokenInfoType newCardTokenInfo {
            get {
                return this.newCardTokenInfoField;
            }
            set {
                if ((this.newCardTokenInfoField != null)) {
                    if ((newCardTokenInfoField.Equals(value) != true)) {
                        this.newCardTokenInfoField = value;
                        this.OnPropertyChanged("newCardTokenInfo");
                    }
                }
                else {
                    this.newCardTokenInfoField = value;
                    this.OnPropertyChanged("newCardTokenInfo");
                }
            }
        }
        
        public extendedCardResponseType extendedCardResponse1 {
            get {
                return this.extendedCardResponse1Field;
            }
            set {
                if ((this.extendedCardResponse1Field != null)) {
                    if ((extendedCardResponse1Field.Equals(value) != true)) {
                        this.extendedCardResponse1Field = value;
                        this.OnPropertyChanged("extendedCardResponse1");
                    }
                }
                else {
                    this.extendedCardResponse1Field = value;
                    this.OnPropertyChanged("extendedCardResponse1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(accountUpdater));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current accountUpdater object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an accountUpdater object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output accountUpdater object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out accountUpdater obj, out System.Exception exception) {
            exception = null;
            obj = default(accountUpdater);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out accountUpdater obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static accountUpdater Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((accountUpdater)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current accountUpdater object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an accountUpdater object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output accountUpdater object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out accountUpdater obj, out System.Exception exception) {
            exception = null;
            obj = default(accountUpdater);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out accountUpdater obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static accountUpdater LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this accountUpdater object
        /// </summary>
        public virtual accountUpdater Clone() {
            return ((accountUpdater)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckAccountInfoType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckAccountTypeEnum accTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string accNumField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string routingNumField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckAccountTypeEnum accType {
            get {
                return this.accTypeField;
            }
            set {
                if ((accTypeField.Equals(value) != true)) {
                    this.accTypeField = value;
                    this.OnPropertyChanged("accType");
                }
            }
        }
        
        public string accNum {
            get {
                return this.accNumField;
            }
            set {
                if ((this.accNumField != null)) {
                    if ((accNumField.Equals(value) != true)) {
                        this.accNumField = value;
                        this.OnPropertyChanged("accNum");
                    }
                }
                else {
                    this.accNumField = value;
                    this.OnPropertyChanged("accNum");
                }
            }
        }
        
        public string routingNum {
            get {
                return this.routingNumField;
            }
            set {
                if ((this.routingNumField != null)) {
                    if ((routingNumField.Equals(value) != true)) {
                        this.routingNumField = value;
                        this.OnPropertyChanged("routingNum");
                    }
                }
                else {
                    this.routingNumField = value;
                    this.OnPropertyChanged("routingNum");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckAccountInfoType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckAccountInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckAccountInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckAccountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckAccountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckAccountInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckAccountInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckAccountInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckAccountInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckAccountInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckAccountInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckAccountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckAccountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckAccountInfoType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckAccountInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckAccountInfoType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckAccountInfoType object
        /// </summary>
        public virtual echeckAccountInfoType Clone() {
            return ((echeckAccountInfoType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum echeckAccountTypeEnum {
        
        /// <remarks/>
        Checking,
        
        /// <remarks/>
        Savings,
        
        /// <remarks/>
        Corporate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Corp Savings")]
        CorpSavings,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckTokenInfoType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckAccountTypeEnum accTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string litleTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string routingNumField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckAccountTypeEnum accType {
            get {
                return this.accTypeField;
            }
            set {
                if ((accTypeField.Equals(value) != true)) {
                    this.accTypeField = value;
                    this.OnPropertyChanged("accType");
                }
            }
        }
        
        public string litleToken {
            get {
                return this.litleTokenField;
            }
            set {
                if ((this.litleTokenField != null)) {
                    if ((litleTokenField.Equals(value) != true)) {
                        this.litleTokenField = value;
                        this.OnPropertyChanged("litleToken");
                    }
                }
                else {
                    this.litleTokenField = value;
                    this.OnPropertyChanged("litleToken");
                }
            }
        }
        
        public string routingNum {
            get {
                return this.routingNumField;
            }
            set {
                if ((this.routingNumField != null)) {
                    if ((routingNumField.Equals(value) != true)) {
                        this.routingNumField = value;
                        this.OnPropertyChanged("routingNum");
                    }
                }
                else {
                    this.routingNumField = value;
                    this.OnPropertyChanged("routingNum");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckTokenInfoType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckTokenInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckTokenInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckTokenInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckTokenInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckTokenInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckTokenInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckTokenInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckTokenInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckTokenInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckTokenInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckTokenInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckTokenInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckTokenInfoType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckTokenInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckTokenInfoType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckTokenInfoType object
        /// </summary>
        public virtual echeckTokenInfoType Clone() {
            return ((echeckTokenInfoType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class cardAccountInfoType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string numberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string expDateField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        public string number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField != null)) {
                    if ((numberField.Equals(value) != true)) {
                        this.numberField = value;
                        this.OnPropertyChanged("number");
                    }
                }
                else {
                    this.numberField = value;
                    this.OnPropertyChanged("number");
                }
            }
        }
        
        public string expDate {
            get {
                return this.expDateField;
            }
            set {
                if ((this.expDateField != null)) {
                    if ((expDateField.Equals(value) != true)) {
                        this.expDateField = value;
                        this.OnPropertyChanged("expDate");
                    }
                }
                else {
                    this.expDateField = value;
                    this.OnPropertyChanged("expDate");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(cardAccountInfoType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cardAccountInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an cardAccountInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output cardAccountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out cardAccountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardAccountInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out cardAccountInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static cardAccountInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((cardAccountInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current cardAccountInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an cardAccountInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cardAccountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cardAccountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardAccountInfoType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out cardAccountInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static cardAccountInfoType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this cardAccountInfoType object
        /// </summary>
        public virtual cardAccountInfoType Clone() {
            return ((cardAccountInfoType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class extendedCardResponseType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string codeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((this.codeField != null)) {
                    if ((codeField.Equals(value) != true)) {
                        this.codeField = value;
                        this.OnPropertyChanged("code");
                    }
                }
                else {
                    this.codeField = value;
                    this.OnPropertyChanged("code");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(extendedCardResponseType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current extendedCardResponseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an extendedCardResponseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output extendedCardResponseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out extendedCardResponseType obj, out System.Exception exception) {
            exception = null;
            obj = default(extendedCardResponseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out extendedCardResponseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static extendedCardResponseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((extendedCardResponseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current extendedCardResponseType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an extendedCardResponseType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output extendedCardResponseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out extendedCardResponseType obj, out System.Exception exception) {
            exception = null;
            obj = default(extendedCardResponseType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out extendedCardResponseType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static extendedCardResponseType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this extendedCardResponseType object
        /// </summary>
        public virtual extendedCardResponseType Clone() {
            return ((extendedCardResponseType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class cardTokenInfoType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string litleTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string expDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string binField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string litleToken {
            get {
                return this.litleTokenField;
            }
            set {
                if ((this.litleTokenField != null)) {
                    if ((litleTokenField.Equals(value) != true)) {
                        this.litleTokenField = value;
                        this.OnPropertyChanged("litleToken");
                    }
                }
                else {
                    this.litleTokenField = value;
                    this.OnPropertyChanged("litleToken");
                }
            }
        }
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        public string expDate {
            get {
                return this.expDateField;
            }
            set {
                if ((this.expDateField != null)) {
                    if ((expDateField.Equals(value) != true)) {
                        this.expDateField = value;
                        this.OnPropertyChanged("expDate");
                    }
                }
                else {
                    this.expDateField = value;
                    this.OnPropertyChanged("expDate");
                }
            }
        }
        
        public string bin {
            get {
                return this.binField;
            }
            set {
                if ((this.binField != null)) {
                    if ((binField.Equals(value) != true)) {
                        this.binField = value;
                        this.OnPropertyChanged("bin");
                    }
                }
                else {
                    this.binField = value;
                    this.OnPropertyChanged("bin");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(cardTokenInfoType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cardTokenInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an cardTokenInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output cardTokenInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out cardTokenInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardTokenInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out cardTokenInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static cardTokenInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((cardTokenInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current cardTokenInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an cardTokenInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cardTokenInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cardTokenInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(cardTokenInfoType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out cardTokenInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static cardTokenInfoType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this cardTokenInfoType object
        /// </summary>
        public virtual cardTokenInfoType Clone() {
            return ((cardTokenInfoType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class tokenResponseType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string litleTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tokenResponseCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tokenMessageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private methodOfPaymentTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool typeFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string binField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string eCheckAccountSuffixField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string litleToken {
            get {
                return this.litleTokenField;
            }
            set {
                if ((this.litleTokenField != null)) {
                    if ((litleTokenField.Equals(value) != true)) {
                        this.litleTokenField = value;
                        this.OnPropertyChanged("litleToken");
                    }
                }
                else {
                    this.litleTokenField = value;
                    this.OnPropertyChanged("litleToken");
                }
            }
        }
        
        public string tokenResponseCode {
            get {
                return this.tokenResponseCodeField;
            }
            set {
                if ((this.tokenResponseCodeField != null)) {
                    if ((tokenResponseCodeField.Equals(value) != true)) {
                        this.tokenResponseCodeField = value;
                        this.OnPropertyChanged("tokenResponseCode");
                    }
                }
                else {
                    this.tokenResponseCodeField = value;
                    this.OnPropertyChanged("tokenResponseCode");
                }
            }
        }
        
        public string tokenMessage {
            get {
                return this.tokenMessageField;
            }
            set {
                if ((this.tokenMessageField != null)) {
                    if ((tokenMessageField.Equals(value) != true)) {
                        this.tokenMessageField = value;
                        this.OnPropertyChanged("tokenMessage");
                    }
                }
                else {
                    this.tokenMessageField = value;
                    this.OnPropertyChanged("tokenMessage");
                }
            }
        }
        
        public methodOfPaymentTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("typeSpecified");
                }
            }
        }
        
        public string bin {
            get {
                return this.binField;
            }
            set {
                if ((this.binField != null)) {
                    if ((binField.Equals(value) != true)) {
                        this.binField = value;
                        this.OnPropertyChanged("bin");
                    }
                }
                else {
                    this.binField = value;
                    this.OnPropertyChanged("bin");
                }
            }
        }
        
        public string eCheckAccountSuffix {
            get {
                return this.eCheckAccountSuffixField;
            }
            set {
                if ((this.eCheckAccountSuffixField != null)) {
                    if ((eCheckAccountSuffixField.Equals(value) != true)) {
                        this.eCheckAccountSuffixField = value;
                        this.OnPropertyChanged("eCheckAccountSuffix");
                    }
                }
                else {
                    this.eCheckAccountSuffixField = value;
                    this.OnPropertyChanged("eCheckAccountSuffix");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(tokenResponseType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tokenResponseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an tokenResponseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output tokenResponseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out tokenResponseType obj, out System.Exception exception) {
            exception = null;
            obj = default(tokenResponseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out tokenResponseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static tokenResponseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((tokenResponseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current tokenResponseType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an tokenResponseType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tokenResponseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tokenResponseType obj, out System.Exception exception) {
            exception = null;
            obj = default(tokenResponseType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out tokenResponseType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static tokenResponseType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this tokenResponseType object
        /// </summary>
        public virtual tokenResponseType Clone() {
            return ((tokenResponseType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class enhancedAuthResponse : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedAuthResponseFundingSource fundingSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private affluenceTypeEnum affluenceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool affluenceFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string issuerCountryField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private cardProductTypeEnum cardProductTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool cardProductTypeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public enhancedAuthResponse() {
            this.fundingSourceField = new enhancedAuthResponseFundingSource();
        }
        
        public enhancedAuthResponseFundingSource fundingSource {
            get {
                return this.fundingSourceField;
            }
            set {
                if ((this.fundingSourceField != null)) {
                    if ((fundingSourceField.Equals(value) != true)) {
                        this.fundingSourceField = value;
                        this.OnPropertyChanged("fundingSource");
                    }
                }
                else {
                    this.fundingSourceField = value;
                    this.OnPropertyChanged("fundingSource");
                }
            }
        }
        
        public affluenceTypeEnum affluence {
            get {
                return this.affluenceField;
            }
            set {
                if ((affluenceField.Equals(value) != true)) {
                    this.affluenceField = value;
                    this.OnPropertyChanged("affluence");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool affluenceSpecified {
            get {
                return this.affluenceFieldSpecified;
            }
            set {
                if ((affluenceFieldSpecified.Equals(value) != true)) {
                    this.affluenceFieldSpecified = value;
                    this.OnPropertyChanged("affluenceSpecified");
                }
            }
        }
        
        public string issuerCountry {
            get {
                return this.issuerCountryField;
            }
            set {
                if ((this.issuerCountryField != null)) {
                    if ((issuerCountryField.Equals(value) != true)) {
                        this.issuerCountryField = value;
                        this.OnPropertyChanged("issuerCountry");
                    }
                }
                else {
                    this.issuerCountryField = value;
                    this.OnPropertyChanged("issuerCountry");
                }
            }
        }
        
        public cardProductTypeEnum cardProductType {
            get {
                return this.cardProductTypeField;
            }
            set {
                if ((cardProductTypeField.Equals(value) != true)) {
                    this.cardProductTypeField = value;
                    this.OnPropertyChanged("cardProductType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cardProductTypeSpecified {
            get {
                return this.cardProductTypeFieldSpecified;
            }
            set {
                if ((cardProductTypeFieldSpecified.Equals(value) != true)) {
                    this.cardProductTypeFieldSpecified = value;
                    this.OnPropertyChanged("cardProductTypeSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(enhancedAuthResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current enhancedAuthResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an enhancedAuthResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output enhancedAuthResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out enhancedAuthResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(enhancedAuthResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out enhancedAuthResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static enhancedAuthResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((enhancedAuthResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current enhancedAuthResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an enhancedAuthResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output enhancedAuthResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out enhancedAuthResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(enhancedAuthResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out enhancedAuthResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static enhancedAuthResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this enhancedAuthResponse object
        /// </summary>
        public virtual enhancedAuthResponse Clone() {
            return ((enhancedAuthResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class enhancedAuthResponseFundingSource : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private fundingSourceTypeEnum typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string availableBalanceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string reloadableField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string prepaidCardTypeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public fundingSourceTypeEnum type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        public string availableBalance {
            get {
                return this.availableBalanceField;
            }
            set {
                if ((this.availableBalanceField != null)) {
                    if ((availableBalanceField.Equals(value) != true)) {
                        this.availableBalanceField = value;
                        this.OnPropertyChanged("availableBalance");
                    }
                }
                else {
                    this.availableBalanceField = value;
                    this.OnPropertyChanged("availableBalance");
                }
            }
        }
        
        public string reloadable {
            get {
                return this.reloadableField;
            }
            set {
                if ((this.reloadableField != null)) {
                    if ((reloadableField.Equals(value) != true)) {
                        this.reloadableField = value;
                        this.OnPropertyChanged("reloadable");
                    }
                }
                else {
                    this.reloadableField = value;
                    this.OnPropertyChanged("reloadable");
                }
            }
        }
        
        public string prepaidCardType {
            get {
                return this.prepaidCardTypeField;
            }
            set {
                if ((this.prepaidCardTypeField != null)) {
                    if ((prepaidCardTypeField.Equals(value) != true)) {
                        this.prepaidCardTypeField = value;
                        this.OnPropertyChanged("prepaidCardType");
                    }
                }
                else {
                    this.prepaidCardTypeField = value;
                    this.OnPropertyChanged("prepaidCardType");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(enhancedAuthResponseFundingSource));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current enhancedAuthResponseFundingSource object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an enhancedAuthResponseFundingSource object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output enhancedAuthResponseFundingSource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out enhancedAuthResponseFundingSource obj, out System.Exception exception) {
            exception = null;
            obj = default(enhancedAuthResponseFundingSource);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out enhancedAuthResponseFundingSource obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static enhancedAuthResponseFundingSource Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((enhancedAuthResponseFundingSource)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current enhancedAuthResponseFundingSource object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an enhancedAuthResponseFundingSource object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output enhancedAuthResponseFundingSource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out enhancedAuthResponseFundingSource obj, out System.Exception exception) {
            exception = null;
            obj = default(enhancedAuthResponseFundingSource);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out enhancedAuthResponseFundingSource obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static enhancedAuthResponseFundingSource LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this enhancedAuthResponseFundingSource object
        /// </summary>
        public virtual enhancedAuthResponseFundingSource Clone() {
            return ((enhancedAuthResponseFundingSource)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public enum fundingSourceTypeEnum {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        PREPAID,
        
        /// <remarks/>
        FSA,
        
        /// <remarks/>
        CREDIT,
        
        /// <remarks/>
        DEBIT,
    }
    
    public enum affluenceTypeEnum {
        
        /// <remarks/>
        AFFLUENT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MASS AFFLUENT")]
        MASSAFFLUENT,
    }
    
    public enum cardProductTypeEnum {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        COMMERCIAL,
        
        /// <remarks/>
        CONSUMER,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class recyclingType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private recycleAdviceType recycleAdviceField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public recyclingType() {
            this.recycleAdviceField = new recycleAdviceType();
        }
        
        public recycleAdviceType recycleAdvice {
            get {
                return this.recycleAdviceField;
            }
            set {
                if ((this.recycleAdviceField != null)) {
                    if ((recycleAdviceField.Equals(value) != true)) {
                        this.recycleAdviceField = value;
                        this.OnPropertyChanged("recycleAdvice");
                    }
                }
                else {
                    this.recycleAdviceField = value;
                    this.OnPropertyChanged("recycleAdvice");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(recyclingType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current recyclingType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an recyclingType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output recyclingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out recyclingType obj, out System.Exception exception) {
            exception = null;
            obj = default(recyclingType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out recyclingType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static recyclingType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((recyclingType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current recyclingType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an recyclingType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output recyclingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out recyclingType obj, out System.Exception exception) {
            exception = null;
            obj = default(recyclingType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out recyclingType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static recyclingType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this recyclingType object
        /// </summary>
        public virtual recyclingType Clone() {
            return ((recyclingType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class recycleAdviceType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime nextRecycleTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string recycleAdviceEndField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public System.DateTime nextRecycleTime {
            get {
                return this.nextRecycleTimeField;
            }
            set {
                if ((nextRecycleTimeField.Equals(value) != true)) {
                    this.nextRecycleTimeField = value;
                    this.OnPropertyChanged("nextRecycleTime");
                }
            }
        }
        
        public string recycleAdviceEnd {
            get {
                return this.recycleAdviceEndField;
            }
            set {
                if ((this.recycleAdviceEndField != null)) {
                    if ((recycleAdviceEndField.Equals(value) != true)) {
                        this.recycleAdviceEndField = value;
                        this.OnPropertyChanged("recycleAdviceEnd");
                    }
                }
                else {
                    this.recycleAdviceEndField = value;
                    this.OnPropertyChanged("recycleAdviceEnd");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(recycleAdviceType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current recycleAdviceType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an recycleAdviceType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output recycleAdviceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out recycleAdviceType obj, out System.Exception exception) {
            exception = null;
            obj = default(recycleAdviceType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out recycleAdviceType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static recycleAdviceType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((recycleAdviceType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current recycleAdviceType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an recycleAdviceType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output recycleAdviceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out recycleAdviceType obj, out System.Exception exception) {
            exception = null;
            obj = default(recycleAdviceType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out recycleAdviceType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static recycleAdviceType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this recycleAdviceType object
        /// </summary>
        public virtual recycleAdviceType Clone() {
            return ((recycleAdviceType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class authReversalResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(authReversalResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current authReversalResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an authReversalResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output authReversalResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out authReversalResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(authReversalResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out authReversalResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static authReversalResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((authReversalResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current authReversalResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an authReversalResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output authReversalResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out authReversalResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(authReversalResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out authReversalResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static authReversalResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this authReversalResponse object
        /// </summary>
        public virtual authReversalResponse Clone() {
            return ((authReversalResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class captureResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountUpdater accountUpdaterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public captureResponse() {
            this.accountUpdaterField = new accountUpdater();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public accountUpdater accountUpdater {
            get {
                return this.accountUpdaterField;
            }
            set {
                if ((this.accountUpdaterField != null)) {
                    if ((accountUpdaterField.Equals(value) != true)) {
                        this.accountUpdaterField = value;
                        this.OnPropertyChanged("accountUpdater");
                    }
                }
                else {
                    this.accountUpdaterField = value;
                    this.OnPropertyChanged("accountUpdater");
                }
            }
        }
        
        public bool duplicate {
            get {
                return this.duplicateField;
            }
            set {
                if ((duplicateField.Equals(value) != true)) {
                    this.duplicateField = value;
                    this.OnPropertyChanged("duplicate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicateSpecified {
            get {
                return this.duplicateFieldSpecified;
            }
            set {
                if ((duplicateFieldSpecified.Equals(value) != true)) {
                    this.duplicateFieldSpecified = value;
                    this.OnPropertyChanged("duplicateSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(captureResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current captureResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an captureResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output captureResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out captureResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(captureResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out captureResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static captureResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((captureResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current captureResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an captureResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output captureResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out captureResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(captureResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out captureResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static captureResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this captureResponse object
        /// </summary>
        public virtual captureResponse Clone() {
            return ((captureResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class forceCaptureResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountUpdater accountUpdaterField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public forceCaptureResponse() {
            this.accountUpdaterField = new accountUpdater();
            this.tokenResponseField = new tokenResponseType();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        public accountUpdater accountUpdater {
            get {
                return this.accountUpdaterField;
            }
            set {
                if ((this.accountUpdaterField != null)) {
                    if ((accountUpdaterField.Equals(value) != true)) {
                        this.accountUpdaterField = value;
                        this.OnPropertyChanged("accountUpdater");
                    }
                }
                else {
                    this.accountUpdaterField = value;
                    this.OnPropertyChanged("accountUpdater");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(forceCaptureResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current forceCaptureResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an forceCaptureResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output forceCaptureResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out forceCaptureResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(forceCaptureResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out forceCaptureResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static forceCaptureResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((forceCaptureResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current forceCaptureResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an forceCaptureResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output forceCaptureResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out forceCaptureResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(forceCaptureResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out forceCaptureResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static forceCaptureResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this forceCaptureResponse object
        /// </summary>
        public virtual forceCaptureResponse Clone() {
            return ((forceCaptureResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class captureGivenAuthResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public captureGivenAuthResponse() {
            this.tokenResponseField = new tokenResponseType();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(captureGivenAuthResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current captureGivenAuthResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an captureGivenAuthResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output captureGivenAuthResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out captureGivenAuthResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(captureGivenAuthResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out captureGivenAuthResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static captureGivenAuthResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((captureGivenAuthResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current captureGivenAuthResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an captureGivenAuthResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output captureGivenAuthResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out captureGivenAuthResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(captureGivenAuthResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out captureGivenAuthResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static captureGivenAuthResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this captureGivenAuthResponse object
        /// </summary>
        public virtual captureGivenAuthResponse Clone() {
            return ((captureGivenAuthResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class saleResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cardProductIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string authorizationResponseSubCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long approvedAmountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool approvedAmountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountInfoType accountInformationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private fraudResult fraudResultField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private billMeLaterResponseData billMeLaterResponseDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private enhancedAuthResponse enhancedAuthResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountUpdater accountUpdaterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private recyclingType recyclingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public saleResponse() {
            this.recyclingField = new recyclingType();
            this.accountUpdaterField = new accountUpdater();
            this.enhancedAuthResponseField = new enhancedAuthResponse();
            this.tokenResponseField = new tokenResponseType();
            this.billMeLaterResponseDataField = new billMeLaterResponseData();
            this.fraudResultField = new fraudResult();
            this.accountInformationField = new accountInfoType();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public string cardProductId {
            get {
                return this.cardProductIdField;
            }
            set {
                if ((this.cardProductIdField != null)) {
                    if ((cardProductIdField.Equals(value) != true)) {
                        this.cardProductIdField = value;
                        this.OnPropertyChanged("cardProductId");
                    }
                }
                else {
                    this.cardProductIdField = value;
                    this.OnPropertyChanged("cardProductId");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public string authCode {
            get {
                return this.authCodeField;
            }
            set {
                if ((this.authCodeField != null)) {
                    if ((authCodeField.Equals(value) != true)) {
                        this.authCodeField = value;
                        this.OnPropertyChanged("authCode");
                    }
                }
                else {
                    this.authCodeField = value;
                    this.OnPropertyChanged("authCode");
                }
            }
        }
        
        public string authorizationResponseSubCode {
            get {
                return this.authorizationResponseSubCodeField;
            }
            set {
                if ((this.authorizationResponseSubCodeField != null)) {
                    if ((authorizationResponseSubCodeField.Equals(value) != true)) {
                        this.authorizationResponseSubCodeField = value;
                        this.OnPropertyChanged("authorizationResponseSubCode");
                    }
                }
                else {
                    this.authorizationResponseSubCodeField = value;
                    this.OnPropertyChanged("authorizationResponseSubCode");
                }
            }
        }
        
        public long approvedAmount {
            get {
                return this.approvedAmountField;
            }
            set {
                if ((approvedAmountField.Equals(value) != true)) {
                    this.approvedAmountField = value;
                    this.OnPropertyChanged("approvedAmount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool approvedAmountSpecified {
            get {
                return this.approvedAmountFieldSpecified;
            }
            set {
                if ((approvedAmountFieldSpecified.Equals(value) != true)) {
                    this.approvedAmountFieldSpecified = value;
                    this.OnPropertyChanged("approvedAmountSpecified");
                }
            }
        }
        
        public accountInfoType accountInformation {
            get {
                return this.accountInformationField;
            }
            set {
                if ((this.accountInformationField != null)) {
                    if ((accountInformationField.Equals(value) != true)) {
                        this.accountInformationField = value;
                        this.OnPropertyChanged("accountInformation");
                    }
                }
                else {
                    this.accountInformationField = value;
                    this.OnPropertyChanged("accountInformation");
                }
            }
        }
        
        public fraudResult fraudResult {
            get {
                return this.fraudResultField;
            }
            set {
                if ((this.fraudResultField != null)) {
                    if ((fraudResultField.Equals(value) != true)) {
                        this.fraudResultField = value;
                        this.OnPropertyChanged("fraudResult");
                    }
                }
                else {
                    this.fraudResultField = value;
                    this.OnPropertyChanged("fraudResult");
                }
            }
        }
        
        public billMeLaterResponseData billMeLaterResponseData {
            get {
                return this.billMeLaterResponseDataField;
            }
            set {
                if ((this.billMeLaterResponseDataField != null)) {
                    if ((billMeLaterResponseDataField.Equals(value) != true)) {
                        this.billMeLaterResponseDataField = value;
                        this.OnPropertyChanged("billMeLaterResponseData");
                    }
                }
                else {
                    this.billMeLaterResponseDataField = value;
                    this.OnPropertyChanged("billMeLaterResponseData");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        public enhancedAuthResponse enhancedAuthResponse {
            get {
                return this.enhancedAuthResponseField;
            }
            set {
                if ((this.enhancedAuthResponseField != null)) {
                    if ((enhancedAuthResponseField.Equals(value) != true)) {
                        this.enhancedAuthResponseField = value;
                        this.OnPropertyChanged("enhancedAuthResponse");
                    }
                }
                else {
                    this.enhancedAuthResponseField = value;
                    this.OnPropertyChanged("enhancedAuthResponse");
                }
            }
        }
        
        public accountUpdater accountUpdater {
            get {
                return this.accountUpdaterField;
            }
            set {
                if ((this.accountUpdaterField != null)) {
                    if ((accountUpdaterField.Equals(value) != true)) {
                        this.accountUpdaterField = value;
                        this.OnPropertyChanged("accountUpdater");
                    }
                }
                else {
                    this.accountUpdaterField = value;
                    this.OnPropertyChanged("accountUpdater");
                }
            }
        }
        
        public recyclingType recycling {
            get {
                return this.recyclingField;
            }
            set {
                if ((this.recyclingField != null)) {
                    if ((recyclingField.Equals(value) != true)) {
                        this.recyclingField = value;
                        this.OnPropertyChanged("recycling");
                    }
                }
                else {
                    this.recyclingField = value;
                    this.OnPropertyChanged("recycling");
                }
            }
        }
        
        public bool duplicate {
            get {
                return this.duplicateField;
            }
            set {
                if ((duplicateField.Equals(value) != true)) {
                    this.duplicateField = value;
                    this.OnPropertyChanged("duplicate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicateSpecified {
            get {
                return this.duplicateFieldSpecified;
            }
            set {
                if ((duplicateFieldSpecified.Equals(value) != true)) {
                    this.duplicateFieldSpecified = value;
                    this.OnPropertyChanged("duplicateSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(saleResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current saleResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an saleResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output saleResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out saleResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(saleResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out saleResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static saleResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((saleResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current saleResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an saleResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output saleResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out saleResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(saleResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out saleResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static saleResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this saleResponse object
        /// </summary>
        public virtual saleResponse Clone() {
            return ((saleResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class creditResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public creditResponse() {
            this.tokenResponseField = new tokenResponseType();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        public bool duplicate {
            get {
                return this.duplicateField;
            }
            set {
                if ((duplicateField.Equals(value) != true)) {
                    this.duplicateField = value;
                    this.OnPropertyChanged("duplicate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicateSpecified {
            get {
                return this.duplicateFieldSpecified;
            }
            set {
                if ((duplicateFieldSpecified.Equals(value) != true)) {
                    this.duplicateFieldSpecified = value;
                    this.OnPropertyChanged("duplicateSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(creditResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current creditResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an creditResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output creditResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out creditResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(creditResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out creditResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static creditResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((creditResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current creditResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an creditResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output creditResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out creditResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(creditResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out creditResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static creditResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this creditResponse object
        /// </summary>
        public virtual creditResponse Clone() {
            return ((creditResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckAccountTypeEnum accTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string accNumField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string routingNumField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string checkNumField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckAccountTypeEnum accType {
            get {
                return this.accTypeField;
            }
            set {
                if ((accTypeField.Equals(value) != true)) {
                    this.accTypeField = value;
                    this.OnPropertyChanged("accType");
                }
            }
        }
        
        public string accNum {
            get {
                return this.accNumField;
            }
            set {
                if ((this.accNumField != null)) {
                    if ((accNumField.Equals(value) != true)) {
                        this.accNumField = value;
                        this.OnPropertyChanged("accNum");
                    }
                }
                else {
                    this.accNumField = value;
                    this.OnPropertyChanged("accNum");
                }
            }
        }
        
        public string routingNum {
            get {
                return this.routingNumField;
            }
            set {
                if ((this.routingNumField != null)) {
                    if ((routingNumField.Equals(value) != true)) {
                        this.routingNumField = value;
                        this.OnPropertyChanged("routingNum");
                    }
                }
                else {
                    this.routingNumField = value;
                    this.OnPropertyChanged("routingNum");
                }
            }
        }
        
        public string checkNum {
            get {
                return this.checkNumField;
            }
            set {
                if ((this.checkNumField != null)) {
                    if ((checkNumField.Equals(value) != true)) {
                        this.checkNumField = value;
                        this.OnPropertyChanged("checkNum");
                    }
                }
                else {
                    this.checkNumField = value;
                    this.OnPropertyChanged("checkNum");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckType object
        /// </summary>
        public virtual echeckType Clone() {
            return ((echeckType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckTokenType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string litleTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string routingNumField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private echeckAccountTypeEnum accTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string checkNumField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string litleToken {
            get {
                return this.litleTokenField;
            }
            set {
                if ((this.litleTokenField != null)) {
                    if ((litleTokenField.Equals(value) != true)) {
                        this.litleTokenField = value;
                        this.OnPropertyChanged("litleToken");
                    }
                }
                else {
                    this.litleTokenField = value;
                    this.OnPropertyChanged("litleToken");
                }
            }
        }
        
        public string routingNum {
            get {
                return this.routingNumField;
            }
            set {
                if ((this.routingNumField != null)) {
                    if ((routingNumField.Equals(value) != true)) {
                        this.routingNumField = value;
                        this.OnPropertyChanged("routingNum");
                    }
                }
                else {
                    this.routingNumField = value;
                    this.OnPropertyChanged("routingNum");
                }
            }
        }
        
        public echeckAccountTypeEnum accType {
            get {
                return this.accTypeField;
            }
            set {
                if ((accTypeField.Equals(value) != true)) {
                    this.accTypeField = value;
                    this.OnPropertyChanged("accType");
                }
            }
        }
        
        public string checkNum {
            get {
                return this.checkNumField;
            }
            set {
                if ((this.checkNumField != null)) {
                    if ((checkNumField.Equals(value) != true)) {
                        this.checkNumField = value;
                        this.OnPropertyChanged("checkNum");
                    }
                }
                else {
                    this.checkNumField = value;
                    this.OnPropertyChanged("checkNum");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckTokenType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckTokenType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckTokenType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckTokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckTokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckTokenType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckTokenType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckTokenType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckTokenType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckTokenType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckTokenType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckTokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckTokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckTokenType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckTokenType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckTokenType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckTokenType object
        /// </summary>
        public virtual echeckTokenType Clone() {
            return ((echeckTokenType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckSale : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool amountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBillingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool verifyField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool verifyFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amount1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact shipToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object echeckOrEcheckTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBilling1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private merchantDataType merchantDataField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckSale() {
            this.merchantDataField = new merchantDataType();
            this.customBilling1Field = new customBilling();
            this.shipToAddressField = new contact();
            this.billToAddressField = new contact();
            this.customBillingField = new customBilling();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool amountSpecified {
            get {
                return this.amountFieldSpecified;
            }
            set {
                if ((amountFieldSpecified.Equals(value) != true)) {
                    this.amountFieldSpecified = value;
                    this.OnPropertyChanged("amountSpecified");
                }
            }
        }
        
        public customBilling customBilling {
            get {
                return this.customBillingField;
            }
            set {
                if ((this.customBillingField != null)) {
                    if ((customBillingField.Equals(value) != true)) {
                        this.customBillingField = value;
                        this.OnPropertyChanged("customBilling");
                    }
                }
                else {
                    this.customBillingField = value;
                    this.OnPropertyChanged("customBilling");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public bool verify {
            get {
                return this.verifyField;
            }
            set {
                if ((verifyField.Equals(value) != true)) {
                    this.verifyField = value;
                    this.OnPropertyChanged("verify");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool verifySpecified {
            get {
                return this.verifyFieldSpecified;
            }
            set {
                if ((verifyFieldSpecified.Equals(value) != true)) {
                    this.verifyFieldSpecified = value;
                    this.OnPropertyChanged("verifySpecified");
                }
            }
        }
        
        public long amount1 {
            get {
                return this.amount1Field;
            }
            set {
                if ((amount1Field.Equals(value) != true)) {
                    this.amount1Field = value;
                    this.OnPropertyChanged("amount1");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public contact shipToAddress {
            get {
                return this.shipToAddressField;
            }
            set {
                if ((this.shipToAddressField != null)) {
                    if ((shipToAddressField.Equals(value) != true)) {
                        this.shipToAddressField = value;
                        this.OnPropertyChanged("shipToAddress");
                    }
                }
                else {
                    this.shipToAddressField = value;
                    this.OnPropertyChanged("shipToAddress");
                }
            }
        }
        
        public object echeckOrEcheckToken {
            get {
                return this.echeckOrEcheckTokenField;
            }
            set {
                if ((this.echeckOrEcheckTokenField != null)) {
                    if ((echeckOrEcheckTokenField.Equals(value) != true)) {
                        this.echeckOrEcheckTokenField = value;
                        this.OnPropertyChanged("echeckOrEcheckToken");
                    }
                }
                else {
                    this.echeckOrEcheckTokenField = value;
                    this.OnPropertyChanged("echeckOrEcheckToken");
                }
            }
        }
        
        public customBilling customBilling1 {
            get {
                return this.customBilling1Field;
            }
            set {
                if ((this.customBilling1Field != null)) {
                    if ((customBilling1Field.Equals(value) != true)) {
                        this.customBilling1Field = value;
                        this.OnPropertyChanged("customBilling1");
                    }
                }
                else {
                    this.customBilling1Field = value;
                    this.OnPropertyChanged("customBilling1");
                }
            }
        }
        
        public merchantDataType merchantData {
            get {
                return this.merchantDataField;
            }
            set {
                if ((this.merchantDataField != null)) {
                    if ((merchantDataField.Equals(value) != true)) {
                        this.merchantDataField = value;
                        this.OnPropertyChanged("merchantData");
                    }
                }
                else {
                    this.merchantDataField = value;
                    this.OnPropertyChanged("merchantData");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckSale));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckSale object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckSale object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckSale object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckSale obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckSale);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckSale obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckSale Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckSale)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckSale object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckSale object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckSale object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckSale obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckSale);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckSale obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckSale LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckSale object
        /// </summary>
        public virtual echeckSale Clone() {
            return ((echeckSale)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckCredit : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool amountFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBillingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amount1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object echeckOrEcheckTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private customBilling customBilling1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private merchantDataType merchantDataField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckCredit() {
            this.merchantDataField = new merchantDataType();
            this.customBilling1Field = new customBilling();
            this.billToAddressField = new contact();
            this.customBillingField = new customBilling();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool amountSpecified {
            get {
                return this.amountFieldSpecified;
            }
            set {
                if ((amountFieldSpecified.Equals(value) != true)) {
                    this.amountFieldSpecified = value;
                    this.OnPropertyChanged("amountSpecified");
                }
            }
        }
        
        public customBilling customBilling {
            get {
                return this.customBillingField;
            }
            set {
                if ((this.customBillingField != null)) {
                    if ((customBillingField.Equals(value) != true)) {
                        this.customBillingField = value;
                        this.OnPropertyChanged("customBilling");
                    }
                }
                else {
                    this.customBillingField = value;
                    this.OnPropertyChanged("customBilling");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public long amount1 {
            get {
                return this.amount1Field;
            }
            set {
                if ((amount1Field.Equals(value) != true)) {
                    this.amount1Field = value;
                    this.OnPropertyChanged("amount1");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public object echeckOrEcheckToken {
            get {
                return this.echeckOrEcheckTokenField;
            }
            set {
                if ((this.echeckOrEcheckTokenField != null)) {
                    if ((echeckOrEcheckTokenField.Equals(value) != true)) {
                        this.echeckOrEcheckTokenField = value;
                        this.OnPropertyChanged("echeckOrEcheckToken");
                    }
                }
                else {
                    this.echeckOrEcheckTokenField = value;
                    this.OnPropertyChanged("echeckOrEcheckToken");
                }
            }
        }
        
        public customBilling customBilling1 {
            get {
                return this.customBilling1Field;
            }
            set {
                if ((this.customBilling1Field != null)) {
                    if ((customBilling1Field.Equals(value) != true)) {
                        this.customBilling1Field = value;
                        this.OnPropertyChanged("customBilling1");
                    }
                }
                else {
                    this.customBilling1Field = value;
                    this.OnPropertyChanged("customBilling1");
                }
            }
        }
        
        public merchantDataType merchantData {
            get {
                return this.merchantDataField;
            }
            set {
                if ((this.merchantDataField != null)) {
                    if ((merchantDataField.Equals(value) != true)) {
                        this.merchantDataField = value;
                        this.OnPropertyChanged("merchantData");
                    }
                }
                else {
                    this.merchantDataField = value;
                    this.OnPropertyChanged("merchantData");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckCredit));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckCredit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckCredit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckCredit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckCredit obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckCredit);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckCredit obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckCredit Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckCredit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckCredit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckCredit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckCredit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckCredit obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckCredit);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckCredit obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckCredit LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckCredit object
        /// </summary>
        public virtual echeckCredit Clone() {
            return ((echeckCredit)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckVerification : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool litleTxnIdFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long amountField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private orderSourceType orderSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private contact billToAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object echeckOrEcheckTokenField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckVerification() {
            this.billToAddressField = new contact();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool litleTxnIdSpecified {
            get {
                return this.litleTxnIdFieldSpecified;
            }
            set {
                if ((litleTxnIdFieldSpecified.Equals(value) != true)) {
                    this.litleTxnIdFieldSpecified = value;
                    this.OnPropertyChanged("litleTxnIdSpecified");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public long amount {
            get {
                return this.amountField;
            }
            set {
                if ((amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.OnPropertyChanged("amount");
                }
            }
        }
        
        public orderSourceType orderSource {
            get {
                return this.orderSourceField;
            }
            set {
                if ((orderSourceField.Equals(value) != true)) {
                    this.orderSourceField = value;
                    this.OnPropertyChanged("orderSource");
                }
            }
        }
        
        public contact billToAddress {
            get {
                return this.billToAddressField;
            }
            set {
                if ((this.billToAddressField != null)) {
                    if ((billToAddressField.Equals(value) != true)) {
                        this.billToAddressField = value;
                        this.OnPropertyChanged("billToAddress");
                    }
                }
                else {
                    this.billToAddressField = value;
                    this.OnPropertyChanged("billToAddress");
                }
            }
        }
        
        public object echeckOrEcheckToken {
            get {
                return this.echeckOrEcheckTokenField;
            }
            set {
                if ((this.echeckOrEcheckTokenField != null)) {
                    if ((echeckOrEcheckTokenField.Equals(value) != true)) {
                        this.echeckOrEcheckTokenField = value;
                        this.OnPropertyChanged("echeckOrEcheckToken");
                    }
                }
                else {
                    this.echeckOrEcheckTokenField = value;
                    this.OnPropertyChanged("echeckOrEcheckToken");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckVerification));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckVerification object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckVerification object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckVerification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckVerification obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckVerification);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckVerification obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckVerification Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckVerification)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckVerification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckVerification object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckVerification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckVerification obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckVerification);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckVerification obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckVerification LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckVerification object
        /// </summary>
        public virtual echeckVerification Clone() {
            return ((echeckVerification)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckSalesResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verificationCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountUpdater accountUpdaterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckSalesResponse() {
            this.tokenResponseField = new tokenResponseType();
            this.accountUpdaterField = new accountUpdater();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public string verificationCode {
            get {
                return this.verificationCodeField;
            }
            set {
                if ((this.verificationCodeField != null)) {
                    if ((verificationCodeField.Equals(value) != true)) {
                        this.verificationCodeField = value;
                        this.OnPropertyChanged("verificationCode");
                    }
                }
                else {
                    this.verificationCodeField = value;
                    this.OnPropertyChanged("verificationCode");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public accountUpdater accountUpdater {
            get {
                return this.accountUpdaterField;
            }
            set {
                if ((this.accountUpdaterField != null)) {
                    if ((accountUpdaterField.Equals(value) != true)) {
                        this.accountUpdaterField = value;
                        this.OnPropertyChanged("accountUpdater");
                    }
                }
                else {
                    this.accountUpdaterField = value;
                    this.OnPropertyChanged("accountUpdater");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        public bool duplicate {
            get {
                return this.duplicateField;
            }
            set {
                if ((duplicateField.Equals(value) != true)) {
                    this.duplicateField = value;
                    this.OnPropertyChanged("duplicate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicateSpecified {
            get {
                return this.duplicateFieldSpecified;
            }
            set {
                if ((duplicateFieldSpecified.Equals(value) != true)) {
                    this.duplicateFieldSpecified = value;
                    this.OnPropertyChanged("duplicateSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckSalesResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckSalesResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckSalesResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckSalesResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckSalesResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckSalesResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckSalesResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckSalesResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckSalesResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckSalesResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckSalesResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckSalesResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckSalesResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckSalesResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckSalesResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckSalesResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckSalesResponse object
        /// </summary>
        public virtual echeckSalesResponse Clone() {
            return ((echeckSalesResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckCreditResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountUpdater accountUpdaterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckCreditResponse() {
            this.tokenResponseField = new tokenResponseType();
            this.accountUpdaterField = new accountUpdater();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public accountUpdater accountUpdater {
            get {
                return this.accountUpdaterField;
            }
            set {
                if ((this.accountUpdaterField != null)) {
                    if ((accountUpdaterField.Equals(value) != true)) {
                        this.accountUpdaterField = value;
                        this.OnPropertyChanged("accountUpdater");
                    }
                }
                else {
                    this.accountUpdaterField = value;
                    this.OnPropertyChanged("accountUpdater");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        public bool duplicate {
            get {
                return this.duplicateField;
            }
            set {
                if ((duplicateField.Equals(value) != true)) {
                    this.duplicateField = value;
                    this.OnPropertyChanged("duplicate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicateSpecified {
            get {
                return this.duplicateFieldSpecified;
            }
            set {
                if ((duplicateFieldSpecified.Equals(value) != true)) {
                    this.duplicateFieldSpecified = value;
                    this.OnPropertyChanged("duplicateSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckCreditResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckCreditResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckCreditResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckCreditResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckCreditResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckCreditResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckCreditResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckCreditResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckCreditResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckCreditResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckCreditResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckCreditResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckCreditResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckCreditResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckCreditResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckCreditResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckCreditResponse object
        /// </summary>
        public virtual echeckCreditResponse Clone() {
            return ((echeckCreditResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckVerificationResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string orderIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckVerificationResponse() {
            this.tokenResponseField = new tokenResponseType();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string orderId {
            get {
                return this.orderIdField;
            }
            set {
                if ((this.orderIdField != null)) {
                    if ((orderIdField.Equals(value) != true)) {
                        this.orderIdField = value;
                        this.OnPropertyChanged("orderId");
                    }
                }
                else {
                    this.orderIdField = value;
                    this.OnPropertyChanged("orderId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckVerificationResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckVerificationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckVerificationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckVerificationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckVerificationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckVerificationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckVerificationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckVerificationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckVerificationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckVerificationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckVerificationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckVerificationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckVerificationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckVerificationResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckVerificationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckVerificationResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckVerificationResponse object
        /// </summary>
        public virtual echeckVerificationResponse Clone() {
            return ((echeckVerificationResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckRedeposit : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object echeckOrEcheckTokenField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public object echeckOrEcheckToken {
            get {
                return this.echeckOrEcheckTokenField;
            }
            set {
                if ((this.echeckOrEcheckTokenField != null)) {
                    if ((echeckOrEcheckTokenField.Equals(value) != true)) {
                        this.echeckOrEcheckTokenField = value;
                        this.OnPropertyChanged("echeckOrEcheckToken");
                    }
                }
                else {
                    this.echeckOrEcheckTokenField = value;
                    this.OnPropertyChanged("echeckOrEcheckToken");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckRedeposit));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckRedeposit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckRedeposit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckRedeposit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckRedeposit obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckRedeposit);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckRedeposit obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckRedeposit Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckRedeposit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckRedeposit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckRedeposit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckRedeposit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckRedeposit obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckRedeposit);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckRedeposit obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckRedeposit LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckRedeposit object
        /// </summary>
        public virtual echeckRedeposit Clone() {
            return ((echeckRedeposit)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class echeckRedepositResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postDateFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private accountUpdater accountUpdaterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private tokenResponseType tokenResponseField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public echeckRedepositResponse() {
            this.tokenResponseField = new tokenResponseType();
            this.accountUpdaterField = new accountUpdater();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postDateSpecified {
            get {
                return this.postDateFieldSpecified;
            }
            set {
                if ((postDateFieldSpecified.Equals(value) != true)) {
                    this.postDateFieldSpecified = value;
                    this.OnPropertyChanged("postDateSpecified");
                }
            }
        }
        
        public accountUpdater accountUpdater {
            get {
                return this.accountUpdaterField;
            }
            set {
                if ((this.accountUpdaterField != null)) {
                    if ((accountUpdaterField.Equals(value) != true)) {
                        this.accountUpdaterField = value;
                        this.OnPropertyChanged("accountUpdater");
                    }
                }
                else {
                    this.accountUpdaterField = value;
                    this.OnPropertyChanged("accountUpdater");
                }
            }
        }
        
        public tokenResponseType tokenResponse {
            get {
                return this.tokenResponseField;
            }
            set {
                if ((this.tokenResponseField != null)) {
                    if ((tokenResponseField.Equals(value) != true)) {
                        this.tokenResponseField = value;
                        this.OnPropertyChanged("tokenResponse");
                    }
                }
                else {
                    this.tokenResponseField = value;
                    this.OnPropertyChanged("tokenResponse");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(echeckRedepositResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current echeckRedepositResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an echeckRedepositResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output echeckRedepositResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out echeckRedepositResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckRedepositResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out echeckRedepositResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static echeckRedepositResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((echeckRedepositResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current echeckRedepositResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an echeckRedepositResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output echeckRedepositResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out echeckRedepositResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(echeckRedepositResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out echeckRedepositResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static echeckRedepositResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this echeckRedepositResponse object
        /// </summary>
        public virtual echeckRedepositResponse Clone() {
            return ((echeckRedepositResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class litleOnlineRequest : baseRequest, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string merchantIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string merchantId {
            get {
                return this.merchantIdField;
            }
            set {
                if ((this.merchantIdField != null)) {
                    if ((merchantIdField.Equals(value) != true)) {
                        this.merchantIdField = value;
                        this.OnPropertyChanged("merchantId");
                    }
                }
                else {
                    this.merchantIdField = value;
                    this.OnPropertyChanged("merchantId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(litleOnlineRequest));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current litleOnlineRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an litleOnlineRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output litleOnlineRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out litleOnlineRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out litleOnlineRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static litleOnlineRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((litleOnlineRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current litleOnlineRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an litleOnlineRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output litleOnlineRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out litleOnlineRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineRequest);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out litleOnlineRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static litleOnlineRequest LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this litleOnlineRequest object
        /// </summary>
        public virtual litleOnlineRequest Clone() {
            return ((litleOnlineRequest)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class baseRequest : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private authentication authenticationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private transactionTypeWithReportGroup itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string versionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public baseRequest() {
            this.itemField = new transactionTypeWithReportGroup();
            this.authenticationField = new authentication();
        }
        
        public authentication authentication {
            get {
                return this.authenticationField;
            }
            set {
                if ((this.authenticationField != null)) {
                    if ((authenticationField.Equals(value) != true)) {
                        this.authenticationField = value;
                        this.OnPropertyChanged("authentication");
                    }
                }
                else {
                    this.authenticationField = value;
                    this.OnPropertyChanged("authentication");
                }
            }
        }
        
        public transactionTypeWithReportGroup Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        public string version {
            get {
                return this.versionField;
            }
            set {
                if ((this.versionField != null)) {
                    if ((versionField.Equals(value) != true)) {
                        this.versionField = value;
                        this.OnPropertyChanged("version");
                    }
                }
                else {
                    this.versionField = value;
                    this.OnPropertyChanged("version");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(baseRequest));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current baseRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an baseRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output baseRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out baseRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(baseRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out baseRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static baseRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((baseRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current baseRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an baseRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output baseRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out baseRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(baseRequest);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out baseRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static baseRequest LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this baseRequest object
        /// </summary>
        public virtual baseRequest Clone() {
            return ((baseRequest)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class baseRequestTransactionEcheckVoid : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(baseRequestTransactionEcheckVoid));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current baseRequestTransactionEcheckVoid object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an baseRequestTransactionEcheckVoid object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output baseRequestTransactionEcheckVoid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out baseRequestTransactionEcheckVoid obj, out System.Exception exception) {
            exception = null;
            obj = default(baseRequestTransactionEcheckVoid);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out baseRequestTransactionEcheckVoid obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static baseRequestTransactionEcheckVoid Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((baseRequestTransactionEcheckVoid)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current baseRequestTransactionEcheckVoid object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an baseRequestTransactionEcheckVoid object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output baseRequestTransactionEcheckVoid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out baseRequestTransactionEcheckVoid obj, out System.Exception exception) {
            exception = null;
            obj = default(baseRequestTransactionEcheckVoid);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out baseRequestTransactionEcheckVoid obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static baseRequestTransactionEcheckVoid LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this baseRequestTransactionEcheckVoid object
        /// </summary>
        public virtual baseRequestTransactionEcheckVoid Clone() {
            return ((baseRequestTransactionEcheckVoid)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class baseRequestTransactionVoidTransaction : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private processingInstructions processingInstructionsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public baseRequestTransactionVoidTransaction() {
            this.processingInstructionsField = new processingInstructions();
        }
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public processingInstructions processingInstructions {
            get {
                return this.processingInstructionsField;
            }
            set {
                if ((this.processingInstructionsField != null)) {
                    if ((processingInstructionsField.Equals(value) != true)) {
                        this.processingInstructionsField = value;
                        this.OnPropertyChanged("processingInstructions");
                    }
                }
                else {
                    this.processingInstructionsField = value;
                    this.OnPropertyChanged("processingInstructions");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(baseRequestTransactionVoidTransaction));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current baseRequestTransactionVoidTransaction object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an baseRequestTransactionVoidTransaction object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output baseRequestTransactionVoidTransaction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out baseRequestTransactionVoidTransaction obj, out System.Exception exception) {
            exception = null;
            obj = default(baseRequestTransactionVoidTransaction);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out baseRequestTransactionVoidTransaction obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static baseRequestTransactionVoidTransaction Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((baseRequestTransactionVoidTransaction)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current baseRequestTransactionVoidTransaction object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an baseRequestTransactionVoidTransaction object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output baseRequestTransactionVoidTransaction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out baseRequestTransactionVoidTransaction obj, out System.Exception exception) {
            exception = null;
            obj = default(baseRequestTransactionVoidTransaction);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out baseRequestTransactionVoidTransaction obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static baseRequestTransactionVoidTransaction LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this baseRequestTransactionVoidTransaction object
        /// </summary>
        public virtual baseRequestTransactionVoidTransaction Clone() {
            return ((baseRequestTransactionVoidTransaction)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class litleOnlineResponse : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private transactionTypeWithReportGroup itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string versionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public litleOnlineResponse() {
            this.itemField = new transactionTypeWithReportGroup();
        }
        
        public transactionTypeWithReportGroup Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public string version {
            get {
                return this.versionField;
            }
            set {
                if ((this.versionField != null)) {
                    if ((versionField.Equals(value) != true)) {
                        this.versionField = value;
                        this.OnPropertyChanged("version");
                    }
                }
                else {
                    this.versionField = value;
                    this.OnPropertyChanged("version");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(litleOnlineResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current litleOnlineResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an litleOnlineResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output litleOnlineResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out litleOnlineResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out litleOnlineResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static litleOnlineResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((litleOnlineResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current litleOnlineResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an litleOnlineResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output litleOnlineResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out litleOnlineResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out litleOnlineResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static litleOnlineResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this litleOnlineResponse object
        /// </summary>
        public virtual litleOnlineResponse Clone() {
            return ((litleOnlineResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class litleOnlineResponseTransactionResponseEcheckVoidResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public bool duplicate {
            get {
                return this.duplicateField;
            }
            set {
                if ((duplicateField.Equals(value) != true)) {
                    this.duplicateField = value;
                    this.OnPropertyChanged("duplicate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicateSpecified {
            get {
                return this.duplicateFieldSpecified;
            }
            set {
                if ((duplicateFieldSpecified.Equals(value) != true)) {
                    this.duplicateFieldSpecified = value;
                    this.OnPropertyChanged("duplicateSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(litleOnlineResponseTransactionResponseEcheckVoidResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current litleOnlineResponseTransactionResponseEcheckVoidResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an litleOnlineResponseTransactionResponseEcheckVoidResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output litleOnlineResponseTransactionResponseEcheckVoidResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out litleOnlineResponseTransactionResponseEcheckVoidResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineResponseTransactionResponseEcheckVoidResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out litleOnlineResponseTransactionResponseEcheckVoidResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static litleOnlineResponseTransactionResponseEcheckVoidResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((litleOnlineResponseTransactionResponseEcheckVoidResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current litleOnlineResponseTransactionResponseEcheckVoidResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an litleOnlineResponseTransactionResponseEcheckVoidResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output litleOnlineResponseTransactionResponseEcheckVoidResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out litleOnlineResponseTransactionResponseEcheckVoidResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineResponseTransactionResponseEcheckVoidResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out litleOnlineResponseTransactionResponseEcheckVoidResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static litleOnlineResponseTransactionResponseEcheckVoidResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this litleOnlineResponseTransactionResponseEcheckVoidResponse object
        /// </summary>
        public virtual litleOnlineResponseTransactionResponseEcheckVoidResponse Clone() {
            return ((litleOnlineResponseTransactionResponseEcheckVoidResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class litleOnlineResponseTransactionResponseVoidTransactionResponse : transactionTypeWithReportGroup, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private long litleTxnIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string responseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime responseTimeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime postDateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string messageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool duplicateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public long litleTxnId {
            get {
                return this.litleTxnIdField;
            }
            set {
                if ((litleTxnIdField.Equals(value) != true)) {
                    this.litleTxnIdField = value;
                    this.OnPropertyChanged("litleTxnId");
                }
            }
        }
        
        public string response {
            get {
                return this.responseField;
            }
            set {
                if ((this.responseField != null)) {
                    if ((responseField.Equals(value) != true)) {
                        this.responseField = value;
                        this.OnPropertyChanged("response");
                    }
                }
                else {
                    this.responseField = value;
                    this.OnPropertyChanged("response");
                }
            }
        }
        
        public System.DateTime responseTime {
            get {
                return this.responseTimeField;
            }
            set {
                if ((responseTimeField.Equals(value) != true)) {
                    this.responseTimeField = value;
                    this.OnPropertyChanged("responseTime");
                }
            }
        }
        
        public System.DateTime postDate {
            get {
                return this.postDateField;
            }
            set {
                if ((postDateField.Equals(value) != true)) {
                    this.postDateField = value;
                    this.OnPropertyChanged("postDate");
                }
            }
        }
        
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((this.messageField != null)) {
                    if ((messageField.Equals(value) != true)) {
                        this.messageField = value;
                        this.OnPropertyChanged("message");
                    }
                }
                else {
                    this.messageField = value;
                    this.OnPropertyChanged("message");
                }
            }
        }
        
        public bool duplicate {
            get {
                return this.duplicateField;
            }
            set {
                if ((duplicateField.Equals(value) != true)) {
                    this.duplicateField = value;
                    this.OnPropertyChanged("duplicate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicateSpecified {
            get {
                return this.duplicateFieldSpecified;
            }
            set {
                if ((duplicateFieldSpecified.Equals(value) != true)) {
                    this.duplicateFieldSpecified = value;
                    this.OnPropertyChanged("duplicateSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(litleOnlineResponseTransactionResponseVoidTransactionResponse));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current litleOnlineResponseTransactionResponseVoidTransactionResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an litleOnlineResponseTransactionResponseVoidTransactionResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output litleOnlineResponseTransactionResponseVoidTransactionResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out litleOnlineResponseTransactionResponseVoidTransactionResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineResponseTransactionResponseVoidTransactionResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out litleOnlineResponseTransactionResponseVoidTransactionResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static litleOnlineResponseTransactionResponseVoidTransactionResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((litleOnlineResponseTransactionResponseVoidTransactionResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current litleOnlineResponseTransactionResponseVoidTransactionResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an litleOnlineResponseTransactionResponseVoidTransactionResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output litleOnlineResponseTransactionResponseVoidTransactionResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out litleOnlineResponseTransactionResponseVoidTransactionResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(litleOnlineResponseTransactionResponseVoidTransactionResponse);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out litleOnlineResponseTransactionResponseVoidTransactionResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static litleOnlineResponseTransactionResponseVoidTransactionResponse LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this litleOnlineResponseTransactionResponseVoidTransactionResponse object
        /// </summary>
        public virtual litleOnlineResponseTransactionResponseVoidTransactionResponse Clone() {
            return ((litleOnlineResponseTransactionResponseVoidTransactionResponse)(this.MemberwiseClone()));
        }
        #endregion
    }
}
